diff --git a/node_modules/expo-camera/.npmignore b/node_modules/expo-camera/.npmignore
new file mode 100644
index 0000000..8617c2f
--- /dev/null
+++ b/node_modules/expo-camera/.npmignore
@@ -0,0 +1,15 @@
+# @generated by expo-module-scripts
+
+# Exclude all top-level hidden directories by convention
+/.*/
+
+# Exclude tarballs generated by `npm pack`
+/*.tgz
+
+__mocks__
+__tests__
+__rsc_tests__
+
+/babel.config.js
+/android/src/androidTest/
+/android/src/test/
diff --git a/node_modules/expo-camera/CHANGELOG.md b/node_modules/expo-camera/CHANGELOG.md
index 4a46425..a0d4467 100644
--- a/node_modules/expo-camera/CHANGELOG.md
+++ b/node_modules/expo-camera/CHANGELOG.md
@@ -6,29 +6,50 @@
 
 ### üéâ New features
 
+- On `Android`, add support for setting the aspect ratio of the camera. ([#29822](https://github.com/expo/expo/pull/29822) by [@alanjhughes](https://github.com/alanjhughes))
+- Support mirroring the output of the front facing camera. ([#30430](https://github.com/expo/expo/pull/30430) by [@alanjhughes](https://github.com/alanjhughes))
+- On `Android`, support mirroring video when using front facing camera. Control mirroring with a prop. Deprecate `mirror` option on `takePictureAsync` and `recordAsync`. ([#30548](https://github.com/expo/expo/pull/30548) by [@alanjhughes](https://github.com/alanjhughes))
+- Support pausing and resuming the preview. ([#30666](https://github.com/expo/expo/pull/30666) by [@alanjhughes](https://github.com/alanjhughes))
+- Add `active` prop to stop and start the camera session. Useful with navigation where the camera is can still be active on a previous screen. ([#30802](https://github.com/expo/expo/pull/30802) by [@alanjhughes](https://github.com/alanjhughes))
+
 ### üêõ Bug fixes
 
+- Add missing `react` and `react-native` peer dependencies for isolated modules. ([#30462](https://github.com/expo/expo/pull/30462) by [@byCedric](https://github.com/byCedric))
+- Only import from `expo/config-plugins` to follow proper dependency chains. ([#30499](https://github.com/expo/expo/pull/30499) by [@byCedric](https://github.com/byCedric))
+- On `iOS`, correctly stop the session when the `CameraView` is removed. ([#30580](https://github.com/expo/expo/pull/30580) by [@alanjhughes](https://github.com/alanjhughes))
+- Add missing `react-native-web` optional peer dependency for isolated modules. ([#30689](https://github.com/expo/expo/pull/30689) by [@byCedric](https://github.com/byCedric))
+- Fix rendering order of child views. ([#30759](https://github.com/expo/expo/pull/30759) by [@alanjhughes](https://github.com/alanjhughes))
+- Set the previews `scaleType` when the aspect ratio is set. ([#30831](https://github.com/expo/expo/pull/30831) by [@alanjhughes](https://github.com/alanjhughes))
+
 ### üí° Others
 
-## 15.0.14 ‚Äî 2024-07-16
+- Removed redundant usage of `EventEmitter` instance. ([#28946](https://github.com/expo/expo/pull/28946) by [@tsapeta](https://github.com/tsapeta))
+- Updated docs for the `pictureSize` prop. ([#30195](https://github.com/expo/expo/pull/30195) by [@alanjhughes](https://github.com/alanjhughes))
+- [Android] Migrated cameraview AAR to autolinking and removed related config-plugin about adding the maven repository. ([#30707](https://github.com/expo/expo/pull/30707) by [@kudo](https://github.com/kudo))
+
+### ‚ö†Ô∏è Notices
+
+- Added support for React Native 0.75.x. ([#30034](https://github.com/expo/expo/pull/30034) by [@gabrieldonadel](https://github.com/gabrieldonadel))
+
+## 15.0.14 - 2024-07-16
 
 _This version does not introduce any user-facing changes._
 
-## 15.0.13 ‚Äî 2024-07-03
+## 15.0.13 - 2024-07-03
 
 ### üêõ Bug fixes
 
 - On `iOS`, fix calling `takePicture` from the simulator. ([#30103](https://github.com/expo/expo/pull/30103) by [@alanjhughes](https://github.com/alanjhughes))
 - On `iOS`, fix touch interactions when using gesture handler. ([#30338](https://github.com/expo/expo/pull/30338) by [@alanjhughes](https://github.com/alanjhughes))
 
-## 15.0.12 ‚Äî 2024-06-20
+## 15.0.12 - 2024-06-20
 
 ### üêõ Bug fixes
 
 - Prevent shutter sound when device volume is muted. ([#29638](https://github.com/expo/expo/pull/29638) by [@frederikocmr](https://github.com/frederikocmr))
 - On `Android`, correct image orientation when `exif` is set to true in `takePictureAsync`. ([#29712](https://github.com/expo/expo/pull/29712) by [@alanjhughes](https://github.com/alanjhughes))
 
-## 15.0.11 ‚Äî 2024-06-13
+## 15.0.11 - 2024-06-13
 
 ### üêõ Bug fixes
 
@@ -39,17 +60,22 @@ _This version does not introduce any user-facing changes._
 
 ### üí° Others
 
-- Make the returned `type` in `BarCodeScanningResult` consistent. ([#29421](https://github.com/expo/expo/pull/29421)) by [@alanjhughes](https://github.com/alanjhughes))
+- Make the returned `type` in `BarCodeScanningResult` consistent. ([#29421](https://github.com/expo/expo/pull/29421)) by [@alanjhughes](https://github.com/alanjhughes)) ([#29421](https://github.com/expo/expo/pull/29421) by [@alanjhughes](https://github.com/alanjhughes))
 
 ## 15.0.10 ‚Äî 2024-05-29
 
 ### üêõ Bug fixes
 
-- On `iOS`, prevent a crash when rendering the view on a simulator. ([#28911](https://github.com/expo/expo/pull/28911) by [@alanjhughes](https://github.com/alanjhughes))
-- On `iOS`, fix incorrect orientation when taking pictures in landscape. ([#28917](https://github.com/expo/expo/pull/28917) by [@alanjhughes](https://github.com/alanjhughes))
 - On `iOS`, set previewLayer on scanner to get correct dimensions. ([#28931](https://github.com/expo/expo/pull/28931) by [@alanjhughes](https://github.com/alanjhughes))
 - On `Android`, correctly handle orientation when landscape pictures are rendered. ([#28929](https://github.com/expo/expo/pull/28929) by [@alanjhughes](https://github.com/alanjhughes))
 
+## 15.0.9 ‚Äî 2024-05-16
+
+### üêõ Bug fixes
+
+- On `iOS`, prevent a crash when rendering the view on a simulator. ([#28911](https://github.com/expo/expo/pull/28911) by [@alanjhughes](https://github.com/alanjhughes))
+- On `iOS`, fix incorrect orientation when taking pictures in landscape. ([#28917](https://github.com/expo/expo/pull/28917) by [@alanjhughes](https://github.com/alanjhughes))
+
 ## 15.0.8 ‚Äî 2024-05-13
 
 ### üêõ Bug fixes
diff --git a/node_modules/expo-camera/README.md b/node_modules/expo-camera/README.md
index 1c66c66..7108ae2 100644
--- a/node_modules/expo-camera/README.md
+++ b/node_modules/expo-camera/README.md
@@ -11,8 +11,8 @@ A React component that renders a preview for the device's either front or back c
 
 # API documentation
 
-- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx)
 - [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/camera/)
+- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/camera/)
 
 # Installation in managed Expo projects
 
@@ -28,19 +28,6 @@ For bare React Native projects, you must ensure that you have [installed and con
 npx expo install expo-camera
 ```
 
-### Configure for iOS
-
-Add `NSCameraUsageDescription` and `NSMicrophoneUsageDescription` keys to your `Info.plist`:
-
-```xml
-<key>NSCameraUsageDescription</key>
-<string>Allow $(PRODUCT_NAME) to use the camera</string>
-<key>NSMicrophoneUsageDescription</key>
-<string>Allow $(PRODUCT_NAME) to use the microphone</string>
-```
-
-Run `npx pod-install` after installing the npm package.
-
 ### Configure for Android
 
 This package automatically adds the `CAMERA` permission to your app. If you want to record videos with audio, you have to include the `RECORD_AUDIO`.
@@ -72,6 +59,19 @@ allprojects {
 
 The sourcecode for `cameraview` can be found at [`expo/cameraview`](https://github.com/expo/cameraview).
 
+### Configure for iOS
+
+Add `NSCameraUsageDescription` and `NSMicrophoneUsageDescription` keys to your `Info.plist`:
+
+```xml
+<key>NSCameraUsageDescription</key>
+<string>Allow $(PRODUCT_NAME) to use the camera</string>
+<key>NSMicrophoneUsageDescription</key>
+<string>Allow $(PRODUCT_NAME) to use the microphone</string>
+```
+
+Run `npx pod-install` after installing the npm package.
+
 # Contributing
 
 Contributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).
diff --git a/node_modules/expo-camera/android/.gitignore b/node_modules/expo-camera/android/.gitignore
new file mode 100644
index 0000000..72768b1
--- /dev/null
+++ b/node_modules/expo-camera/android/.gitignore
@@ -0,0 +1,261 @@
+
+# Created by https://www.gitignore.io/api/java,maven,gradle,android,intellij,androidstudio
+
+### Android ###
+# Built application files
+*.apk
+*.ap_
+
+# Files for the ART/Dalvik VM
+*.dex
+
+# Java class files
+*.class
+
+# Generated files
+bin/
+gen/
+out/
+
+# Gradle files
+.gradle/
+build/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+# Proguard folder generated by Eclipse
+proguard/
+
+# Log Files
+*.log
+
+# Android Studio Navigation editor temp files
+.navigation/
+
+# Android Studio captures folder
+captures/
+
+# Intellij
+*.iml
+.idea/workspace.xml
+.idea/tasks.xml
+.idea/gradle.xml
+.idea/dictionaries
+.idea/libraries
+
+# External native build folder generated in Android Studio 2.2 and later
+.externalNativeBuild
+
+# Freeline
+freeline.py
+freeline/
+freeline_project_description.json
+
+### Android Patch ###
+gen-external-apklibs
+
+### AndroidStudio ###
+# Covers files to be ignored for android development using Android Studio.
+
+# Built application files
+
+# Files for the ART/Dalvik VM
+
+# Java class files
+
+# Generated files
+
+# Gradle files
+.gradle
+
+# Signing files
+.signing/
+
+# Local configuration file (sdk path, etc)
+
+# Proguard folder generated by Eclipse
+
+# Log Files
+
+# Android Studio
+/*/build/
+/*/local.properties
+/*/out
+/*/*/build
+/*/*/production
+*.ipr
+*~
+*.swp
+
+# Android Patch
+
+# External native build folder generated in Android Studio 2.2 and later
+
+# NDK
+obj/
+
+# IntelliJ IDEA
+*.iws
+/out/
+
+# User-specific configurations
+.idea/libraries/
+.idea/.name
+.idea/compiler.xml
+.idea/copyright/profiles_settings.xml
+.idea/encodings.xml
+.idea/misc.xml
+.idea/modules.xml
+.idea/scopes/scope_settings.xml
+.idea/vcs.xml
+.idea/jsLibraryMappings.xml
+.idea/datasources.xml
+.idea/dataSources.ids
+.idea/sqlDataSources.xml
+.idea/dynamic.xml
+.idea/uiDesigner.xml
+
+# OS-specific files
+.DS_Store
+.DS_Store?
+._*
+.Spotlight-V100
+.Trashes
+ehthumbs.db
+Thumbs.db
+
+# Legacy Eclipse project files
+.classpath
+.project
+.cproject
+.settings/
+
+# Mobile Tools for Java (J2ME)
+.mtj.tmp/
+
+# Package Files #
+*.war
+*.ear
+
+# virtual machine crash logs (Reference: http://www.java.com/en/download/help/error_hotspot.xml)
+hs_err_pid*
+
+## Plugin-specific files:
+
+# mpeltonen/sbt-idea plugin
+.idea_modules/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Mongo Explorer plugin
+.idea/mongoSettings.xml
+
+### AndroidStudio Patch ###
+
+!/gradle/wrapper/gradle-wrapper.jar
+
+### Intellij ###
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm
+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
+
+# User-specific stuff:
+.idea/**/workspace.xml
+.idea/**/tasks.xml
+
+# Sensitive or high-churn files:
+.idea/**/dataSources/
+.idea/**/dataSources.ids
+.idea/**/dataSources.xml
+.idea/**/dataSources.local.xml
+.idea/**/sqlDataSources.xml
+.idea/**/dynamic.xml
+.idea/**/uiDesigner.xml
+
+# Gradle:
+.idea/**/gradle.xml
+.idea/**/libraries
+
+# CMake
+cmake-build-debug/
+
+# Mongo Explorer plugin:
+.idea/**/mongoSettings.xml
+
+## File-based project format:
+
+## Plugin-specific files:
+
+# IntelliJ
+
+# mpeltonen/sbt-idea plugin
+
+# JIRA plugin
+
+# Cursive Clojure plugin
+.idea/replstate.xml
+
+# Ruby plugin and RubyMine
+/.rakeTasks
+
+### Intellij Patch ###
+# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721
+
+# *.iml
+# modules.xml
+# .idea/misc.xml
+# *.ipr
+
+# Sonarlint plugin
+.idea/sonarlint
+
+### Java ###
+# Compiled class file
+
+# Log file
+
+# BlueJ files
+*.ctxt
+
+# Mobile Tools for Java (J2ME)
+
+# Package Files #
+*.jar
+*.zip
+*.tar.gz
+*.rar
+
+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
+
+### Maven ###
+target/
+pom.xml.tag
+pom.xml.releaseBackup
+pom.xml.versionsBackup
+pom.xml.next
+release.properties
+dependency-reduced-pom.xml
+buildNumber.properties
+.mvn/timing.properties
+
+# Avoid ignoring Maven wrapper jar file (.jar files are usually ignored)
+!/.mvn/wrapper/maven-wrapper.jar
+
+### Gradle ###
+**/build/
+
+# Ignore Gradle GUI config
+gradle-app.setting
+
+# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)
+!gradle-wrapper.jar
+
+# Cache of project
+.gradletasknamecache
+
+# # Work around https://youtrack.jetbrains.com/issue/IDEA-116898
+# gradle/wrapper/gradle-wrapper.properties
+
+
+# End of https://www.gitignore.io/api/java,maven,gradle,android,intellij,androidstudio
diff --git a/node_modules/expo-camera/android/build.gradle b/node_modules/expo-camera/android/build.gradle
index e21155f..f6b0353 100644
--- a/node_modules/expo-camera/android/build.gradle
+++ b/node_modules/expo-camera/android/build.gradle
@@ -1,7 +1,7 @@
 apply plugin: 'com.android.library'
 
 group = 'host.exp.exponent'
-version = '15.0.14'
+version = '15.0.9'
 
 def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
 apply from: expoModulesCorePlugin
@@ -14,7 +14,7 @@ android {
   namespace "expo.modules.camera"
   defaultConfig {
     versionCode 32
-    versionName "15.0.14"
+    versionName "15.0.9"
   }
 }
 
@@ -28,7 +28,7 @@ dependencies {
   def camerax_version = "1.4.0-beta02"
 
   api "androidx.exifinterface:exifinterface:1.3.7"
-  api 'com.google.android:cameraview:1.0.0'
+  api "androidx.appcompat:appcompat:1.1.0"
 
   implementation "androidx.camera:camera-core:${camerax_version}"
   implementation "androidx.camera:camera-camera2:${camerax_version}"
@@ -40,5 +40,5 @@ dependencies {
   implementation "com.google.mlkit:barcode-scanning:17.2.0"
   implementation "androidx.camera:camera-mlkit-vision:${camerax_version}"
 
-  api 'com.google.android:cameraview:1.0.0'
+  implementation project(":${project.name}\$cameraview-aar")
 }
diff --git a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.aar b/node_modules/expo-camera/android/libs/cameraview-1.0.0.aar
similarity index 100%
rename from node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.aar
rename to node_modules/expo-camera/android/libs/cameraview-1.0.0.aar
diff --git a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.aar.md5 b/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.aar.md5
deleted file mode 100644
index 3a9e5ad..0000000
--- a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.aar.md5
+++ /dev/null
@@ -1 +0,0 @@
-4c23883e5472108b7a31944c4ba58eea
\ No newline at end of file
diff --git a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.aar.sha1 b/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.aar.sha1
deleted file mode 100644
index a6b64e1..0000000
--- a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.aar.sha1
+++ /dev/null
@@ -1 +0,0 @@
-3874291cb50122dd79eba6d49524e0be58bb8f6f
\ No newline at end of file
diff --git a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.pom b/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.pom
deleted file mode 100644
index 4154f41..0000000
--- a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.pom
+++ /dev/null
@@ -1,29 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.android</groupId>
-  <artifactId>cameraview</artifactId>
-  <version>1.0.0</version>
-  <packaging>aar</packaging>
-  <dependencies>
-    <dependency>
-      <groupId>com.android.support</groupId>
-      <artifactId>support-annotations</artifactId>
-      <version>25.3.1</version>
-      <scope>compile</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.android.support</groupId>
-      <artifactId>support-v4</artifactId>
-      <version>25.3.1</version>
-      <scope>compile</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.android.support</groupId>
-      <artifactId>appcompat-v7</artifactId>
-      <version>25.3.1</version>
-      <scope>compile</scope>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.pom.md5 b/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.pom.md5
deleted file mode 100644
index 0535771..0000000
--- a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.pom.md5
+++ /dev/null
@@ -1 +0,0 @@
-e8661f352c640fe9d420e153a0aa095d
\ No newline at end of file
diff --git a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.pom.sha1 b/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.pom.sha1
deleted file mode 100644
index a7ffdd6..0000000
--- a/node_modules/expo-camera/android/maven/com/google/android/cameraview/1.0.0/cameraview-1.0.0.pom.sha1
+++ /dev/null
@@ -1 +0,0 @@
-cd83ff235770e2d944b18f70f881c29b4f935599
\ No newline at end of file
diff --git a/node_modules/expo-camera/android/maven/com/google/android/cameraview/maven-metadata.xml b/node_modules/expo-camera/android/maven/com/google/android/cameraview/maven-metadata.xml
deleted file mode 100644
index 7413b02..0000000
--- a/node_modules/expo-camera/android/maven/com/google/android/cameraview/maven-metadata.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<metadata>
-  <groupId>com.google.android</groupId>
-  <artifactId>cameraview</artifactId>
-  <versioning>
-    <release>1.0.0</release>
-    <versions>
-      <version>1.0.0</version>
-    </versions>
-    <lastUpdated>20180605124508</lastUpdated>
-  </versioning>
-</metadata>
diff --git a/node_modules/expo-camera/android/maven/com/google/android/cameraview/maven-metadata.xml.md5 b/node_modules/expo-camera/android/maven/com/google/android/cameraview/maven-metadata.xml.md5
deleted file mode 100644
index e48decb..0000000
--- a/node_modules/expo-camera/android/maven/com/google/android/cameraview/maven-metadata.xml.md5
+++ /dev/null
@@ -1 +0,0 @@
-bea89333cd34959f72e685c639ed8e42
\ No newline at end of file
diff --git a/node_modules/expo-camera/android/maven/com/google/android/cameraview/maven-metadata.xml.sha1 b/node_modules/expo-camera/android/maven/com/google/android/cameraview/maven-metadata.xml.sha1
deleted file mode 100644
index a1976c0..0000000
--- a/node_modules/expo-camera/android/maven/com/google/android/cameraview/maven-metadata.xml.sha1
+++ /dev/null
@@ -1 +0,0 @@
-b9227e1e2d046cd0fb25f555bc5d16ee240c27f5
\ No newline at end of file
diff --git a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/CameraExceptions.kt b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/CameraExceptions.kt
index fece17b..40859ad 100644
--- a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/CameraExceptions.kt
+++ b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/CameraExceptions.kt
@@ -9,4 +9,7 @@ class CameraExceptions {
 
   class ImageRetrievalException(url: String) :
     CodedException("Could not get the image from given url: '$url'")
+
+  class UnsupportedAspectRatioException(aspectRatio: String) :
+    CodedException("Unsupported aspect ratio: '$aspectRatio'")
 }
diff --git a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/CameraViewModule.kt b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/CameraViewModule.kt
index 5b7d3cf..e471c60 100644
--- a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/CameraViewModule.kt
+++ b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/CameraViewModule.kt
@@ -8,6 +8,7 @@ import expo.modules.camera.analyzers.MLKitBarCodeScanner
 import expo.modules.camera.records.BarcodeSettings
 import expo.modules.camera.records.BarcodeType
 import expo.modules.camera.records.CameraMode
+import expo.modules.camera.records.CameraRatio
 import expo.modules.camera.records.CameraType
 import expo.modules.camera.records.FlashMode
 import expo.modules.camera.records.FocusMode
@@ -179,14 +180,33 @@ class CameraViewModule : Module() {
         pictureSize?.let {
           if (view.pictureSize != pictureSize) {
             view.pictureSize = it
+            return@Prop
           }
         }
+
+        view.pictureSize = ""
       }
 
       Prop("autoFocus") { view, autoFocus: FocusMode? ->
         view.autoFocus = autoFocus ?: FocusMode.OFF
       }
 
+      Prop("ratio") { view, ratio: CameraRatio? ->
+        ratio?.let {
+          if (view.ratio != ratio) {
+            view.ratio = it
+          }
+        }
+      }
+
+      Prop("mirror") { view, mirror: Boolean? ->
+        mirror?.let {
+          view.mirror = it
+          return@Prop
+        }
+        view.mirror = false
+      }
+
       OnViewDidUpdateProps { view ->
         view.createCamera()
       }
@@ -197,7 +217,7 @@ class CameraViewModule : Module() {
         } else {
           val image = CameraViewHelper.generateSimulatorPhoto(view.width, view.height)
           moduleScope.launch {
-            ResolveTakenPicture(image, promise, options, cacheDirectory) { response ->
+            ResolveTakenPicture(image, promise, options, false, cacheDirectory) { response ->
               view.onPictureSaved(response)
             }.resolve()
           }
@@ -220,6 +240,14 @@ class CameraViewModule : Module() {
         view.activeRecording?.close()
       }.runOnQueue(Queues.MAIN)
 
+      AsyncFunction("resumePreview") { view: ExpoCameraView ->
+        view.resumePreview()
+      }
+
+      AsyncFunction("pausePreview") { view: ExpoCameraView ->
+        view.pausePreview()
+      }
+
       OnViewDestroys { view ->
         view.orientationEventListener.disable()
         view.cancelCoroutineScope()
diff --git a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/ExpoCameraView.kt b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/ExpoCameraView.kt
index 415dfb1..1ad6471 100644
--- a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/ExpoCameraView.kt
+++ b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/ExpoCameraView.kt
@@ -18,6 +18,7 @@ import android.util.Size
 import android.view.OrientationEventListener
 import android.view.Surface
 import android.view.View
+import android.view.ViewGroup
 import android.view.WindowManager
 import androidx.annotation.OptIn
 import androidx.appcompat.app.AppCompatActivity
@@ -33,6 +34,7 @@ import androidx.camera.core.ImageAnalysis
 import androidx.camera.core.ImageCapture
 import androidx.camera.core.ImageCaptureException
 import androidx.camera.core.ImageProxy
+import androidx.camera.core.MirrorMode
 import androidx.camera.core.Preview
 import androidx.camera.core.UseCaseGroup
 import androidx.camera.core.resolutionselector.ResolutionSelector
@@ -56,6 +58,7 @@ import expo.modules.camera.common.PictureSavedEvent
 import expo.modules.camera.records.BarcodeSettings
 import expo.modules.camera.records.BarcodeType
 import expo.modules.camera.records.CameraMode
+import expo.modules.camera.records.CameraRatio
 import expo.modules.camera.records.CameraType
 import expo.modules.camera.records.FlashMode
 import expo.modules.camera.records.FocusMode
@@ -124,9 +127,12 @@ class ExpoCameraView(
   private var recorder: Recorder? = null
   private var barcodeFormats: List<BarcodeType> = emptyList()
 
-  private var previewView = PreviewView(context)
+  private var previewView = PreviewView(context).apply {
+    elevation = 0f
+  }
   private val scope = CoroutineScope(Dispatchers.Main)
   private var shouldCreateCamera = false
+  private var previewPaused = false
 
   var lensFacing = CameraType.BACK
     set(value) {
@@ -158,12 +164,24 @@ class ExpoCameraView(
       shouldCreateCamera = true
     }
 
+  var ratio: CameraRatio = CameraRatio.ONE_ONE
+    set(value) {
+      field = value
+      shouldCreateCamera = true
+    }
+
   var pictureSize: String = ""
     set(value) {
       field = value
       shouldCreateCamera = true
     }
 
+  var mirror: Boolean = false
+    set(value) {
+      field = value
+      shouldCreateCamera = true
+    }
+
   var mute: Boolean = false
   var animateShutter: Boolean = true
   var enableTorch: Boolean by Delegates.observable(false) { _, _, newValue ->
@@ -193,18 +211,30 @@ class ExpoCameraView(
   // Scanning-related properties
   private var shouldScanBarcodes = false
 
+  override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {
+    measureChild(previewView, widthMeasureSpec, heightMeasureSpec)
+
+    setMeasuredDimension(
+      ViewGroup.resolveSize(previewView.measuredWidth, widthMeasureSpec),
+      ViewGroup.resolveSize(previewView.measuredHeight, heightMeasureSpec)
+    )
+  }
+
   override fun onLayout(changed: Boolean, left: Int, top: Int, right: Int, bottom: Int) {
+    if (!changed) {
+      return
+    }
     val width = right - left
     val height = bottom - top
-
     previewView.layout(0, 0, width, height)
-    postInvalidate(left, top, right, bottom)
   }
 
-  override fun onViewAdded(child: View) {
-    if (previewView === child) {
+  override fun onViewAdded(child: View?) {
+    super.onViewAdded(child)
+    if (child == previewView) {
       return
     }
+    child?.bringToFront()
     removeView(previewView)
     addView(previewView, 0)
   }
@@ -240,7 +270,8 @@ class ExpoCameraView(
           }
           cacheDirectory.let {
             scope.launch {
-              ResolveTakenPicture(data, promise, options, it) { response: Bundle ->
+              val shouldMirror = mirror && lensFacing == CameraType.FRONT
+              ResolveTakenPicture(data, promise, options, shouldMirror, it) { response: Bundle ->
                 onPictureSaved(response)
               }.resolve()
             }
@@ -297,6 +328,7 @@ class ExpoCameraView(
                     }
                   )
                 }
+
                 else -> promise.reject(
                   CameraExceptions.VideoRecordingFailed(
                     event.cause?.message
@@ -313,7 +345,7 @@ class ExpoCameraView(
 
   @SuppressLint("UnsafeOptInUsageError")
   fun createCamera() {
-    if (!shouldCreateCamera) {
+    if (!shouldCreateCamera || previewPaused) {
       return
     }
     shouldCreateCamera = false
@@ -321,7 +353,15 @@ class ExpoCameraView(
       {
         val cameraProvider: ProcessCameraProvider = providerFuture.get()
 
+        previewView.scaleType = if (ratio != CameraRatio.ONE_ONE) {
+          PreviewView.ScaleType.FIT_CENTER
+        } else {
+          PreviewView.ScaleType.FILL_CENTER
+        }
+
+        val resolutionSelector = buildResolutionSelector()
         val preview = Preview.Builder()
+          .setResolutionSelector(resolutionSelector)
           .build()
           .also {
             it.surfaceProvider = previewView.surfaceProvider
@@ -337,11 +377,7 @@ class ExpoCameraView(
               val size = Size.parseSize(pictureSize)
               setTargetResolution(size)
             } else {
-              setResolutionSelector(
-                ResolutionSelector.Builder()
-                  .setResolutionStrategy(ResolutionStrategy.HIGHEST_AVAILABLE_STRATEGY)
-                  .build()
-              )
+              setResolutionSelector(resolutionSelector)
             }
           }
           .build()
@@ -400,9 +436,22 @@ class ExpoCameraView(
         }
       }
 
+  private fun buildResolutionSelector(): ResolutionSelector = if (ratio == CameraRatio.ONE_ONE) {
+    ResolutionSelector.Builder().setResolutionFilter { supportedSizes, _ ->
+      return@setResolutionFilter supportedSizes.filter {
+        it.width == it.height
+      }
+    }.setResolutionStrategy(ResolutionStrategy.HIGHEST_AVAILABLE_STRATEGY).build()
+  } else {
+    ResolutionSelector.Builder().apply {
+      setAspectRatioStrategy(ratio.mapToStrategy())
+      setResolutionStrategy(ResolutionStrategy.HIGHEST_AVAILABLE_STRATEGY)
+    }.build()
+  }
+
   private fun createVideoCapture(): VideoCapture<Recorder> {
     val preferredQuality = videoQuality.mapToQuality()
-    val fallbackStrategy = FallbackStrategy.lowerQualityOrHigherThan(preferredQuality)
+    val fallbackStrategy = FallbackStrategy.higherQualityOrLowerThan(preferredQuality)
     val qualitySelector = QualitySelector.from(preferredQuality, fallbackStrategy)
 
     val recorder = Recorder.Builder()
@@ -413,9 +462,12 @@ class ExpoCameraView(
         this.recorder = it
       }
 
-    return VideoCapture.Builder(recorder)
-      .setVideoStabilizationEnabled(true)
-      .build()
+    return VideoCapture.Builder(recorder).apply {
+      if (mirror) {
+        setMirrorMode(MirrorMode.MIRROR_MODE_ON_FRONT_ONLY)
+      }
+      setVideoStabilizationEnabled(true)
+    }.build()
   }
 
   private fun startFocusMetering() {
@@ -439,6 +491,7 @@ class ExpoCameraView(
           onCameraReady(Unit)
           setTorchEnabled(enableTorch)
         }
+
         else -> {}
       }
     }
@@ -452,6 +505,17 @@ class ExpoCameraView(
     } ?: emptyList()
   }
 
+  fun resumePreview() {
+    shouldCreateCamera = true
+    previewPaused = false
+    createCamera()
+  }
+
+  fun pausePreview() {
+    previewPaused = true
+    cameraProvider?.unbindAll()
+  }
+
   fun setShouldScanBarcodes(shouldScanBarcodes: Boolean) {
     this.shouldScanBarcodes = shouldScanBarcodes
     shouldCreateCamera = true
@@ -544,7 +608,7 @@ class ExpoCameraView(
           raw = barcode.raw,
           type = BarcodeType.mapFormatToString(barcode.type),
           cornerPoints = cornerPoints,
-          boundingBox = boundingBox
+          bounds = boundingBox
         )
       )
     }
@@ -566,7 +630,13 @@ class ExpoCameraView(
         parent?.layout(0, 0, parent.measuredWidth, parent.measuredHeight)
       }
     })
-    addView(previewView)
+    addView(
+      previewView,
+      ViewGroup.LayoutParams(
+        ViewGroup.LayoutParams.MATCH_PARENT,
+        ViewGroup.LayoutParams.MATCH_PARENT
+      )
+    )
   }
 
   fun onPictureSaved(response: Bundle) {
diff --git a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/Options.kt b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/Options.kt
index cc878d0..c73d5fb 100644
--- a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/Options.kt
+++ b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/Options.kt
@@ -9,6 +9,7 @@ data class PictureOptions(
   @Field val base64: Boolean = false,
   @Field val exif: Boolean = false,
   @Field val additionalExif: Map<String, Any>? = null,
+  @Field val mirror: Boolean = false,
   @Field val skipProcessing: Boolean = false,
   @Field val fastMode: Boolean = false,
   @Field val id: Int? = null,
diff --git a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/common/CommonEvents.kt b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/common/CommonEvents.kt
index c8bbe4e..2dac0ec 100644
--- a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/common/CommonEvents.kt
+++ b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/common/CommonEvents.kt
@@ -10,7 +10,7 @@ class BarcodeScannedEvent(
   @Field val raw: String,
   @Field val type: String,
   @Field val cornerPoints: ArrayList<Bundle>,
-  @Field val boundingBox: Bundle
+  @Field val bounds: Bundle
 ) : Record
 
 class CameraMountErrorEvent(
diff --git a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/legacy/ExpoCameraView.kt b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/legacy/ExpoCameraView.kt
index ee4fb51..265f7d8 100644
--- a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/legacy/ExpoCameraView.kt
+++ b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/legacy/ExpoCameraView.kt
@@ -285,7 +285,7 @@ class ExpoCameraView(
           raw = barCode.raw,
           type = BarcodeType.mapFormatToString(barCode.type),
           cornerPoints = cornerPoints,
-          boundingBox = boundingBox
+          bounds = boundingBox
         )
       )
     }
diff --git a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/records/CameraRecords.kt b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/records/CameraRecords.kt
index 6a399c0..698301a 100644
--- a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/records/CameraRecords.kt
+++ b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/records/CameraRecords.kt
@@ -1,10 +1,11 @@
 package expo.modules.camera.records
 
 import android.hardware.camera2.CameraMetadata
-import androidx.camera.core.CameraSelector
 import androidx.camera.core.ImageCapture
+import androidx.camera.core.resolutionselector.AspectRatioStrategy
 import androidx.camera.video.Quality
 import com.google.mlkit.vision.barcode.common.Barcode
+import expo.modules.camera.CameraExceptions
 import expo.modules.kotlin.records.Field
 import expo.modules.kotlin.records.Record
 import expo.modules.kotlin.types.Enumerable
@@ -13,17 +14,24 @@ enum class CameraType(val value: String) : Enumerable {
   FRONT("front"),
   BACK("back");
 
-  fun mapToSelector() = when (this) {
-    FRONT -> CameraSelector.DEFAULT_FRONT_CAMERA
-    BACK -> CameraSelector.DEFAULT_BACK_CAMERA
-  }
-
   fun mapToCharacteristic() = when (this) {
     FRONT -> CameraMetadata.LENS_FACING_FRONT
     BACK -> CameraMetadata.LENS_FACING_BACK
   }
 }
 
+enum class CameraRatio(val value: String) : Enumerable {
+  FOUR_THREE("4:3"),
+  SIXTEEN_NINE("16:9"),
+  ONE_ONE("1:1");
+
+  fun mapToStrategy() = when (this) {
+    FOUR_THREE -> AspectRatioStrategy.RATIO_4_3_FALLBACK_AUTO_STRATEGY
+    SIXTEEN_NINE -> AspectRatioStrategy.RATIO_16_9_FALLBACK_AUTO_STRATEGY
+    else -> throw CameraExceptions.UnsupportedAspectRatioException(this.value)
+  }
+}
+
 enum class VideoQuality(val value: String) : Enumerable {
   VIDEO2160P("2160p"),
   VIDEO1080P("1080p"),
diff --git a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/tasks/ResolveTakenPicture.kt b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/tasks/ResolveTakenPicture.kt
index 1f4a5d0..f1095a3 100644
--- a/node_modules/expo-camera/android/src/main/java/expo/modules/camera/tasks/ResolveTakenPicture.kt
+++ b/node_modules/expo-camera/android/src/main/java/expo/modules/camera/tasks/ResolveTakenPicture.kt
@@ -39,14 +39,28 @@ private const val DATA_KEY = "data"
 private const val URI_KEY = "uri"
 private const val ID_KEY = "id"
 
+fun getMirroredOrientation(orientation: Int): Int {
+  return when (orientation) {
+    ExifInterface.ORIENTATION_NORMAL -> ExifInterface.ORIENTATION_FLIP_HORIZONTAL
+    ExifInterface.ORIENTATION_ROTATE_90 -> ExifInterface.ORIENTATION_TRANSPOSE
+    ExifInterface.ORIENTATION_ROTATE_180 -> ExifInterface.ORIENTATION_FLIP_VERTICAL
+    ExifInterface.ORIENTATION_ROTATE_270 -> ExifInterface.ORIENTATION_TRANSVERSE
+    ExifInterface.ORIENTATION_FLIP_HORIZONTAL -> ExifInterface.ORIENTATION_NORMAL
+    ExifInterface.ORIENTATION_TRANSPOSE -> ExifInterface.ORIENTATION_ROTATE_90
+    ExifInterface.ORIENTATION_FLIP_VERTICAL -> ExifInterface.ORIENTATION_ROTATE_180
+    ExifInterface.ORIENTATION_TRANSVERSE -> ExifInterface.ORIENTATION_ROTATE_270
+    else -> ExifInterface.ORIENTATION_UNDEFINED
+  }
+}
+
 class ResolveTakenPicture(
   private var imageData: ByteArray,
   private var promise: Promise,
   private var options: PictureOptions,
+  private var mirror: Boolean,
   private val directory: File,
   private var pictureSavedDelegate: PictureSavedDelegate
 ) {
-
   private val quality: Int
     get() = (options.quality * 100).toInt()
 
@@ -76,8 +90,11 @@ class ResolveTakenPicture(
         // Get orientation of the image from mImageData via inputStream
         val orientation = exifInterface.getAttributeInt(
           ExifInterface.TAG_ORIENTATION,
-          ExifInterface.ORIENTATION_UNDEFINED
+          ExifInterface.ORIENTATION_NORMAL
         )
+        if (options.mirror) {
+          exifInterface.setAttribute(ExifInterface.TAG_ORIENTATION, getMirroredOrientation(orientation).toString())
+        }
 
         val bitmapOptions = BitmapFactory
           .Options()
@@ -90,7 +107,7 @@ class ResolveTakenPicture(
         // If OOM exception was thrown, we try to use downsampling to recover.
         while (bitmapOptions.inSampleSize <= options.maxDownsampling) {
           try {
-            bitmap = decodeBitmap(imageData, orientation, options.exif, bitmapOptions)
+            bitmap = decodeBitmap(imageData, orientation, options, bitmapOptions)
             break
           } catch (exception: OutOfMemoryError) {
             bitmapOptions.inSampleSize *= 2
@@ -222,9 +239,9 @@ class ResolveTakenPicture(
     return null
   }
 
-  private fun decodeBitmap(imageData: ByteArray, orientation: Int, exif: Boolean, bitmapOptions: BitmapFactory.Options): Bitmap {
+  private fun decodeBitmap(imageData: ByteArray, orientation: Int, options: PictureOptions, bitmapOptions: BitmapFactory.Options): Bitmap {
     // Rotate the bitmap to the proper orientation if needed
-    return if (!exif) {
+    return if (!options.exif) {
       decodeAndRotateBitmap(imageData, getImageRotation(orientation), bitmapOptions)
     } else {
       BitmapFactory.decodeByteArray(imageData, 0, imageData.size, bitmapOptions)
@@ -234,15 +251,23 @@ class ResolveTakenPicture(
   private fun decodeAndRotateBitmap(imageData: ByteArray, angle: Int, options: BitmapFactory.Options): Bitmap {
     val source = BitmapFactory.decodeByteArray(imageData, 0, imageData.size, options)
     val matrix = Matrix()
-    matrix.postRotate(angle.toFloat())
+    matrix.apply {
+      postRotate(angle.toFloat())
+      if (mirror) {
+        postScale(-1f, 1f)
+      }
+    }
     return Bitmap.createBitmap(source, 0, 0, source.width, source.height, matrix, true)
   }
 
   // Get rotation degrees from Exif orientation enum
   private fun getImageRotation(orientation: Int) = when (orientation) {
     ExifInterface.ORIENTATION_ROTATE_90 -> 90
+    ExifInterface.ORIENTATION_TRANSPOSE -> 90
     ExifInterface.ORIENTATION_ROTATE_180 -> 180
+    ExifInterface.ORIENTATION_FLIP_VERTICAL -> 180
     ExifInterface.ORIENTATION_ROTATE_270 -> 270
+    ExifInterface.ORIENTATION_TRANSVERSE -> 270
     else -> 0
   }
 }
diff --git a/node_modules/expo-camera/babel.config.js b/node_modules/expo-camera/babel.config.js
new file mode 100644
index 0000000..68c7d31
--- /dev/null
+++ b/node_modules/expo-camera/babel.config.js
@@ -0,0 +1,2 @@
+// @generated by expo-module-scripts
+module.exports = require('expo-module-scripts/babel.config.base');
diff --git a/node_modules/expo-camera/build/Camera.types.d.ts b/node_modules/expo-camera/build/Camera.types.d.ts
index 498e844..cdadc24 100644
--- a/node_modules/expo-camera/build/Camera.types.d.ts
+++ b/node_modules/expo-camera/build/Camera.types.d.ts
@@ -1,10 +1,11 @@
-import { PermissionResponse, PermissionStatus, PermissionExpiration, PermissionHookOptions } from 'expo-modules-core';
-import { Ref } from 'react';
+import { PermissionResponse, PermissionStatus, PermissionExpiration, PermissionHookOptions, EventSubscription } from 'expo-modules-core';
+import type { Ref } from 'react';
 import type { ViewProps } from 'react-native';
 export type CameraType = 'front' | 'back';
 export type FlashMode = 'off' | 'on' | 'auto';
 export type ImageType = 'png' | 'jpg';
 export type CameraMode = 'picture' | 'video';
+export type CameraRatio = '4:3' | '16:9' | '1:1';
 /**
  * This option specifies the mode of focus on the device.
  * - `on` - Indicates that the device should autofocus once and then lock the focus.
@@ -122,6 +123,14 @@ export type CameraPictureOptions = {
      * @platform web
      */
     isImageMirror?: boolean;
+    /**
+     * When set to `true`, the output image will be flipped along the vertical axis when using the front camera.
+     * @default false
+     * @platform ios
+     * @platform android
+     * @deprecated Use `mirror` prop on `CameraView` instead.
+     */
+    mirror?: boolean;
     /**
      * @hidden
      */
@@ -147,7 +156,7 @@ export type CameraRecordingOptions = {
     /**
      * If `true`, the recorded video will be flipped along the vertical axis. iOS flips videos recorded with the front camera by default,
      * but you can reverse that back by setting this to `true`. On Android, this is handled in the user's device settings.
-     * @platform ios
+     * @deprecated Use `mirror` prop on `CameraView` instead.
      */
     mirror?: boolean;
     /**
@@ -275,12 +284,24 @@ export type CameraProps = ViewProps & {
      * @default false
      */
     mute?: boolean;
+    /**
+     * A boolean that determines whether the camera should mirror the image when using the front camera.
+     * @default false
+     */
+    mirror?: boolean;
     /**
      * Indicates the focus mode to use.
      * @default off
      * @platform ios
      */
     autofocus?: FocusMode;
+    /**
+     * A boolean that determines whether the camera should be active.
+     * Useful in situations where the camera may not have unmounted but you still want to stop the camera session.
+     * @default true
+     * @platform ios
+     */
+    active?: boolean;
     /**
      * Specify the quality of the recorded video. Use one of `VideoQuality` possible values:
      * for 16:9 resolution `2160p`, `1080p`, `720p`, `480p` : `Android only` and for 4:3 `4:3` (the size is 640x480).
@@ -293,8 +314,9 @@ export type CameraProps = ViewProps & {
      */
     animateShutter?: boolean;
     /**
-     * A string representing the size of pictures [`takePictureAsync`](#takepictureasync) will take.
-     * Available sizes can be fetched with [`getAvailablePictureSizes`](#getavailablepicturesizes).
+     * A string representing the size of pictures [`takePictureAsync`](#takepictureasyncoptions) will take.
+     * Available sizes can be fetched with [`getAvailablePictureSizesAsync`](#getavailablepicturesizesasync).
+     * Setting this prop will cause the `ratio` prop to be ignored as the aspect ratio is determined by the selected size.
      */
     pictureSize?: string;
     /**
@@ -302,21 +324,12 @@ export type CameraProps = ViewProps & {
      * @default false
      */
     enableTorch?: boolean;
-    /**
-     * Callback invoked when camera preview has been set.
-     */
-    onCameraReady?: () => void;
     /**
      * The video stabilization mode used for a video recording. Use one of [`VideoStabilization.<value>`](#videostabilization).
      * You can read more about each stabilization type in [Apple Documentation](https://developer.apple.com/documentation/avfoundation/avcapturevideostabilizationmode).
      * @platform ios
      */
     videoStabilizationMode?: VideoStabilization;
-    /**
-     * Callback invoked when camera preview could not been started.
-     * @param event Error object that contains a `message`.
-     */
-    onMountError?: (event: CameraMountError) => void;
     /**
      * @example
      * ```tsx
@@ -328,15 +341,6 @@ export type CameraProps = ViewProps & {
      * ```
      */
     barcodeScannerSettings?: BarcodeSettings;
-    /**
-     * Callback that is invoked when a barcode has been successfully scanned. The callback is provided with
-     * an object of the [`BarcodeScanningResult`](#barcodescanningresult) shape, where the `type`
-     * refers to the barcode type that was scanned and the `data` is the information encoded in the barcode
-     * (in this case of QR codes, this is often a URL). See [`BarcodeType`](#barcodetype) for supported values.
-     * for supported values.
-     * @param scanningResult
-     */
-    onBarcodeScanned?: (scanningResult: BarcodeScanningResult) => void;
     /**
      * A URL for an image to be shown while the camera is loading.
      * @platform web
@@ -348,6 +352,31 @@ export type CameraProps = ViewProps & {
      * @platform ios
      */
     responsiveOrientationWhenOrientationLocked?: boolean;
+    /**
+     * A string representing the aspect ratio of the preview. For example, `4:3` and `16:9`.
+     * Note: Setting the aspect ratio here will change the scaleType of the camera preview from `FILL` to `FIT`.
+     * @default 1:1
+     * @platform android
+     */
+    ratio?: CameraRatio;
+    /**
+     * Callback invoked when camera preview has been set.
+     */
+    onCameraReady?: () => void;
+    /**
+     * Callback invoked when camera preview could not start.
+     * @param event Error object that contains a `message`.
+     */
+    onMountError?: (event: CameraMountError) => void;
+    /**
+     * Callback that is invoked when a barcode has been successfully scanned. The callback is provided with
+     * an object of the [`BarcodeScanningResult`](#barcodescanningresult) shape, where the `type`
+     * refers to the barcode type that was scanned, and the `data` is the information encoded in the barcode
+     * (in this case of QR codes, this is often a URL). See [`BarcodeType`](#barcodetype) for supported values.
+     * for supported values.
+     * @param scanningResult
+     */
+    onBarcodeScanned?: (scanningResult: BarcodeScanningResult) => void;
     /**
      * Callback invoked when responsive orientation changes. Only applicable if `responsiveOrientationWhenOrientationLocked` is `true`
      * @param event result object that contains updated orientation of camera
@@ -366,6 +395,8 @@ export interface CameraViewRef {
     }>;
     readonly stopRecording: () => Promise<void>;
     readonly launchModernScanner: () => Promise<void>;
+    readonly resumePreview: () => Promise<void>;
+    readonly pausePreview: () => Promise<void>;
 }
 /**
  * @hidden
@@ -388,6 +419,7 @@ export type CameraNativeProps = {
     autoFocus?: FocusMode;
     mute?: boolean;
     zoom?: number;
+    ratio?: CameraRatio;
     barcodeScannerSettings?: BarcodeSettings;
     barcodeScannerEnabled?: boolean;
     poster?: string;
@@ -424,5 +456,5 @@ export type ScanningOptions = {
  * The available barcode types that can be scanned.
  */
 export type BarcodeType = 'aztec' | 'ean13' | 'ean8' | 'qr' | 'pdf417' | 'upc_e' | 'datamatrix' | 'code39' | 'code93' | 'itf14' | 'codabar' | 'code128' | 'upc_a';
-export { PermissionResponse, PermissionStatus, PermissionExpiration, PermissionHookOptions };
+export { PermissionResponse, PermissionStatus, PermissionExpiration, PermissionHookOptions, EventSubscription as Subscription, };
 //# sourceMappingURL=Camera.types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/Camera.types.d.ts.map b/node_modules/expo-camera/build/Camera.types.d.ts.map
index c3004fe..4e03263 100644
--- a/node_modules/expo-camera/build/Camera.types.d.ts.map
+++ b/node_modules/expo-camera/build/Camera.types.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"Camera.types.d.ts","sourceRoot":"","sources":["../src/Camera.types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"Camera.types.d.ts","sourceRoot":"","sources":["../src/Camera.types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/Camera.types.js b/node_modules/expo-camera/build/Camera.types.js
index c2f307b..42d66be 100644
--- a/node_modules/expo-camera/build/Camera.types.js
+++ b/node_modules/expo-camera/build/Camera.types.js
@@ -1,3 +1,3 @@
 import { PermissionStatus, } from 'expo-modules-core';
-export { PermissionStatus };
+export { PermissionStatus, };
 //# sourceMappingURL=Camera.types.js.map
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/Camera.types.js.map b/node_modules/expo-camera/build/Camera.types.js.map
index d57b8a2..72cb5b6 100644
--- a/node_modules/expo-camera/build/Camera.types.js.map
+++ b/node_modules/expo-camera/build/Camera.types.js.map
@@ -1 +1 @@
-{"version":3,"file":"Camera.types.js","sourceRoot":"","sources":["../src/Camera.types.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,gBAAgB,GAGjB,MAAM,mBAAmB,CAAC;AA2d3B,OAAO,EAAsB,gBAAgB,EAA+C,CAAC","sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n} from 'expo-modules-core';\nimport { Ref } from 'react';\nimport type { ViewProps } from 'react-native';\n\nexport type CameraType = 'front' | 'back';\n\nexport type FlashMode = 'off' | 'on' | 'auto';\n\nexport type ImageType = 'png' | 'jpg';\n\nexport type CameraMode = 'picture' | 'video';\n\n/**\n * This option specifies the mode of focus on the device.\n * - `on` - Indicates that the device should autofocus once and then lock the focus.\n * - `off` - Indicates that the device should automatically focus when needed.\n * @default off\n */\nexport type FocusMode = 'on' | 'off';\n\n/**\n * This option specifies what codec to use when recording a video.\n * @platform ios\n */\nexport type VideoCodec = 'avc1' | 'hvc1' | 'jpeg' | 'apcn' | 'ap4h';\n\n/**\n * This option specifies the stabilization mode to use when recording a video.\n * @platform ios\n */\nexport type VideoStabilization = 'off' | 'standard' | 'cinematic' | 'auto';\n\n// @docsMissing\nexport type VideoQuality = '2160p' | '1080p' | '720p' | '480p' | '4:3';\n\nexport type CameraOrientation =\n  | 'portrait'\n  | 'portraitUpsideDown'\n  | 'landscapeLeft'\n  | 'landscapeRight';\n\n// @docsMissing\n/**\n * @hidden We do not expose related web methods in docs.\n * @platform web\n */\nexport type ImageSize = {\n  width: number;\n  height: number;\n};\n\n// @docsMissing\n/**\n * @hidden We do not expose related web methods in docs.\n * @platform web\n */\nexport type WebCameraSettings = {\n  autoFocus?: string;\n  flashMode?: string;\n  whiteBalance?: string;\n  exposureCompensation?: number;\n  colorTemperature?: number;\n  iso?: number;\n  brightness?: number;\n  contrast?: number;\n  saturation?: number;\n  sharpness?: number;\n  focusDistance?: number;\n  zoom?: number;\n};\n\n// @needsAudit\nexport type CameraCapturedPicture = {\n  /**\n   * Captured image width.\n   */\n  width: number;\n  /**\n   * Captured image height.\n   */\n  height: number;\n  /**\n   * On web, the value of `uri` is the same as `base64` because file system URLs are not supported in the browser.\n   */\n  uri: string;\n  /**\n   * A Base64 representation of the image.\n   */\n  base64?: string;\n  /**\n   * On Android and iOS this object may include various fields based on the device and operating system.\n   * On web, it is a partial representation of the [`MediaTrackSettings`](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings) dictionary.\n   */\n  exif?: Partial<MediaTrackSettings> | any;\n};\n\n// @needsAudit\nexport type CameraPictureOptions = {\n  /**\n   * Specify the compression quality from `0` to `1`. `0` means compress for small size, and `1` means compress for maximum quality.\n   */\n  quality?: number;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64?: boolean;\n  /**\n   * Whether to also include the EXIF data for the image.\n   */\n  exif?: boolean;\n  /**\n   * Additional EXIF data to be included for the image. Only useful when `exif` option is set to `true`.\n   * @platform android\n   * @platform ios\n   */\n  additionalExif?: Record<string, any>;\n  /**\n   * A callback invoked when picture is saved. If set, the promise of this method will resolve immediately with no data after picture is captured.\n   * The data that it should contain will be passed to this callback. If displaying or processing a captured photo right after taking it\n   * is not your case, this callback lets you skip waiting for it to be saved.\n   * @param picture\n   */\n  onPictureSaved?: (picture: CameraCapturedPicture) => void;\n  // TODO(Bacon): Is it possible to implement this in the browser?\n  /**\n   * If set to `true`, camera skips orientation adjustment and returns an image straight from the device's camera.\n   * If enabled, `quality` option is discarded (processing pipeline is skipped as a whole).\n   * Although enabling this option reduces image delivery time significantly, it may cause the image to appear in a wrong orientation\n   * in the `Image` component (at the time of writing, it does not respect EXIF orientation of the images).\n   * > **Note**: Enabling `skipProcessing` would cause orientation uncertainty. `Image` component does not respect EXIF\n   * > stored orientation information, that means obtained image would be displayed wrongly (rotated by 90¬∞, 180¬∞ or 270¬∞).\n   * > Different devices provide different orientations. For example some Sony Xperia or Samsung devices don't provide\n   * > correctly oriented images by default. To always obtain correctly oriented image disable `skipProcessing` option.\n   */\n  skipProcessing?: boolean;\n  /**\n   * @platform web\n   */\n  scale?: number;\n  /**\n   * @platform web\n   */\n  imageType?: ImageType;\n  /**\n   * @platform web\n   */\n  isImageMirror?: boolean;\n  /**\n   * @hidden\n   */\n  id?: number;\n  /**\n   * @hidden\n   */\n  fastMode?: boolean;\n  /**\n   * @hidden\n   */\n  maxDownsampling?: number;\n};\n\n// @needsAudit\nexport type CameraRecordingOptions = {\n  /**\n   * Maximum video duration in seconds.\n   */\n  maxDuration?: number;\n  /**\n   * Maximum video file size in bytes.\n   */\n  maxFileSize?: number;\n  /**\n   * If `true`, the recorded video will be flipped along the vertical axis. iOS flips videos recorded with the front camera by default,\n   * but you can reverse that back by setting this to `true`. On Android, this is handled in the user's device settings.\n   * @platform ios\n   */\n  mirror?: boolean;\n  /**\n   * This option specifies what codec to use when recording the video. See [`VideoCodec`](#videocodec) for the possible values.\n   * @platform ios\n   */\n  codec?: VideoCodec;\n};\n\n/**\n * @hidden\n */\nexport type PictureSavedListener = (event: {\n  nativeEvent: { data: CameraCapturedPicture; id: number };\n}) => void;\n\n/**\n * @hidden\n */\nexport type CameraReadyListener = () => void;\n\n/**\n * @hidden\n */\nexport type ResponsiveOrientationChangedListener = (event: {\n  nativeEvent: ResponsiveOrientationChanged;\n}) => void;\n\nexport type ResponsiveOrientationChanged = { orientation: CameraOrientation };\n\n/**\n * @hidden\n */\nexport type MountErrorListener = (event: { nativeEvent: CameraMountError }) => void;\n\n// @docsMissing\nexport type CameraMountError = { message: string };\n\n// @docsMissing\nexport type Point = {\n  x: number;\n  y: number;\n};\n\nexport type BarcodeSize = {\n  /**\n   * The height value.\n   */\n  height: number;\n  /**\n   * The width value.\n   */\n  width: number;\n};\n\n/**\n * These coordinates are represented in the coordinate space of the camera source (e.g. when you\n * are using the camera view, these values are adjusted to the dimensions of the view).\n */\nexport type BarcodePoint = Point;\n\nexport type BarcodeBounds = {\n  /**\n   * The origin point of the bounding box.\n   */\n  origin: BarcodePoint;\n  /**\n   * The size of the bounding box.\n   */\n  size: BarcodeSize;\n};\n\n// @needsAudit\nexport type BarcodeScanningResult = {\n  /**\n   * The barcode type.\n   */\n  type: string;\n  /**\n   * The parsed information encoded in the barcode.\n   */\n  data: string;\n  /**\n   * The raw information encoded in the barcode.\n   * May be different from `data` depending on the barcode type.\n   * @platform android\n   * @hidden\n   */\n  raw?: string;\n  /**\n   * Corner points of the bounding box.\n   * `cornerPoints` is not always available and may be empty. On iOS, for `code39` and `pdf417`\n   * you don't get this value.\n   */\n  cornerPoints: BarcodePoint[];\n  /**\n   * The [BarcodeBounds](#barcodebounds) object.\n   * `bounds` in some case will be representing an empty rectangle.\n   * Moreover, `bounds` doesn't have to bound the whole barcode.\n   * For some types, they will represent the area used by the scanner.\n   */\n  bounds: BarcodeBounds;\n};\n\nexport type ScanningResult = Omit<BarcodeScanningResult, 'bounds'>;\n\n// @needsAudit\nexport type CameraProps = ViewProps & {\n  /**\n   * Camera facing. Use one of `CameraType`. When `front`, use the front-facing camera.\n   * When `back`, use the back-facing camera.\n   * @default 'back'\n   */\n  facing?: CameraType;\n  /**\n   * Camera flash mode. Use one of `FlashMode` values. When `on`, the flash on your device will\n   * turn on when taking a picture. When `off`, it won't. Setting it to `auto` will fire flash if required.\n   * @default 'off'\n   */\n  flash?: FlashMode;\n  /**\n   * A value between `0` and `1` being a percentage of device's max zoom. `0` - not zoomed, `1` - maximum zoom.\n   * @default 0\n   */\n  zoom?: number;\n  /**\n   * Used to select image or video output\n   * @default 'picture'\n   */\n  mode?: CameraMode;\n  /**\n   * If present, video will be recorded with no sound.\n   * @default false\n   */\n  mute?: boolean;\n  /**\n   * Indicates the focus mode to use.\n   * @default off\n   * @platform ios\n   */\n  autofocus?: FocusMode;\n  /**\n   * Specify the quality of the recorded video. Use one of `VideoQuality` possible values:\n   * for 16:9 resolution `2160p`, `1080p`, `720p`, `480p` : `Android only` and for 4:3 `4:3` (the size is 640x480).\n   * If the chosen quality is not available for a device, the highest available is chosen.\n   */\n  videoQuality?: VideoQuality;\n  /**\n   * A boolean that determines whether the camera shutter animation should be enabled.\n   * @default true\n   */\n  animateShutter?: boolean;\n  /**\n   * A string representing the size of pictures [`takePictureAsync`](#takepictureasync) will take.\n   * Available sizes can be fetched with [`getAvailablePictureSizes`](#getavailablepicturesizes).\n   */\n  pictureSize?: string;\n  /**\n   * A boolean to enable or disable the torch\n   * @default false\n   */\n  enableTorch?: boolean;\n  /**\n   * Callback invoked when camera preview has been set.\n   */\n  onCameraReady?: () => void;\n  /**\n   * The video stabilization mode used for a video recording. Use one of [`VideoStabilization.<value>`](#videostabilization).\n   * You can read more about each stabilization type in [Apple Documentation](https://developer.apple.com/documentation/avfoundation/avcapturevideostabilizationmode).\n   * @platform ios\n   */\n  videoStabilizationMode?: VideoStabilization;\n  /**\n   * Callback invoked when camera preview could not been started.\n   * @param event Error object that contains a `message`.\n   */\n  onMountError?: (event: CameraMountError) => void;\n  /**\n   * @example\n   * ```tsx\n   * <CameraView\n   *   barcodeScannerSettings={{\n   *     barcodeTypes: [\"qr\"],\n   *   }}\n   * />\n   * ```\n   */\n  barcodeScannerSettings?: BarcodeSettings;\n  /**\n   * Callback that is invoked when a barcode has been successfully scanned. The callback is provided with\n   * an object of the [`BarcodeScanningResult`](#barcodescanningresult) shape, where the `type`\n   * refers to the barcode type that was scanned and the `data` is the information encoded in the barcode\n   * (in this case of QR codes, this is often a URL). See [`BarcodeType`](#barcodetype) for supported values.\n   * for supported values.\n   * @param scanningResult\n   */\n  onBarcodeScanned?: (scanningResult: BarcodeScanningResult) => void;\n  /**\n   * A URL for an image to be shown while the camera is loading.\n   * @platform web\n   */\n  poster?: string;\n  /**\n   * Whether to allow responsive orientation of the camera when the screen orientation is locked (i.e. when set to `true`\n   * landscape photos will be taken if the device is turned that way, even if the app or device orientation is locked to portrait)\n   * @platform ios\n   */\n  responsiveOrientationWhenOrientationLocked?: boolean;\n  /**\n   * Callback invoked when responsive orientation changes. Only applicable if `responsiveOrientationWhenOrientationLocked` is `true`\n   * @param event result object that contains updated orientation of camera\n   * @platform ios\n   */\n  onResponsiveOrientationChanged?: (event: ResponsiveOrientationChanged) => void;\n};\n\n/**\n * @hidden\n */\nexport interface CameraViewRef {\n  readonly takePicture: (options: CameraPictureOptions) => Promise<CameraCapturedPicture>;\n  readonly getAvailablePictureSizes: () => Promise<string[]>;\n  readonly record: (options?: CameraRecordingOptions) => Promise<{ uri: string }>;\n  readonly stopRecording: () => Promise<void>;\n  readonly launchModernScanner: () => Promise<void>;\n}\n\n/**\n * @hidden\n */\nexport type CameraNativeProps = {\n  pointerEvents?: any;\n  style?: any;\n  ref?: Ref<CameraViewRef>;\n  onCameraReady?: CameraReadyListener;\n  onMountError?: MountErrorListener;\n  onBarcodeScanned?: (event: { nativeEvent: BarcodeScanningResult }) => void;\n  onPictureSaved?: PictureSavedListener;\n  onResponsiveOrientationChanged?: ResponsiveOrientationChangedListener;\n  facing?: string;\n  flashMode?: string;\n  enableTorch?: boolean;\n  animateShutter?: boolean;\n  autoFocus?: FocusMode;\n  mute?: boolean;\n  zoom?: number;\n  barcodeScannerSettings?: BarcodeSettings;\n  barcodeScannerEnabled?: boolean;\n  poster?: string;\n  responsiveOrientationWhenOrientationLocked?: boolean;\n};\n\n// @docsMissing\nexport type BarcodeSettings = {\n  barcodeTypes: BarcodeType[];\n};\n\n/**\n * @platform ios\n */\nexport type ScanningOptions = {\n  /**\n   * The type of codes to scan for.\n   */\n  barcodeTypes: BarcodeType[];\n  /**\n   * Indicates whether people can use a two-finger pinch-to-zoom gesture.\n   * @default true\n   */\n  isPinchToZoomEnabled?: boolean;\n  /**\n   * Guidance text, such as ‚ÄúSlow Down,‚Äù appears over the live video.\n   * @default true\n   */\n  isGuidanceEnabled?: boolean;\n  /**\n   * Indicates whether the scanner displays highlights around recognized items.\n   * @default false\n   */\n  isHighlightingEnabled?: boolean;\n};\n\n/**\n * The available barcode types that can be scanned.\n */\nexport type BarcodeType =\n  | 'aztec'\n  | 'ean13'\n  | 'ean8'\n  | 'qr'\n  | 'pdf417'\n  | 'upc_e'\n  | 'datamatrix'\n  | 'code39'\n  | 'code93'\n  | 'itf14'\n  | 'codabar'\n  | 'code128'\n  | 'upc_a';\n\nexport { PermissionResponse, PermissionStatus, PermissionExpiration, PermissionHookOptions };\n"]}
\ No newline at end of file
+{"version":3,"file":"Camera.types.js","sourceRoot":"","sources":["../src/Camera.types.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,gBAAgB,GAIjB,MAAM,mBAAmB,CAAC;AA4f3B,OAAO,EAEL,gBAAgB,GAIjB,CAAC","sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  EventSubscription,\n} from 'expo-modules-core';\nimport type { Ref } from 'react';\nimport type { ViewProps } from 'react-native';\n\nexport type CameraType = 'front' | 'back';\n\nexport type FlashMode = 'off' | 'on' | 'auto';\n\nexport type ImageType = 'png' | 'jpg';\n\nexport type CameraMode = 'picture' | 'video';\n\nexport type CameraRatio = '4:3' | '16:9' | '1:1';\n\n/**\n * This option specifies the mode of focus on the device.\n * - `on` - Indicates that the device should autofocus once and then lock the focus.\n * - `off` - Indicates that the device should automatically focus when needed.\n * @default off\n */\nexport type FocusMode = 'on' | 'off';\n\n/**\n * This option specifies what codec to use when recording a video.\n * @platform ios\n */\nexport type VideoCodec = 'avc1' | 'hvc1' | 'jpeg' | 'apcn' | 'ap4h';\n\n/**\n * This option specifies the stabilization mode to use when recording a video.\n * @platform ios\n */\nexport type VideoStabilization = 'off' | 'standard' | 'cinematic' | 'auto';\n\n// @docsMissing\nexport type VideoQuality = '2160p' | '1080p' | '720p' | '480p' | '4:3';\n\nexport type CameraOrientation =\n  | 'portrait'\n  | 'portraitUpsideDown'\n  | 'landscapeLeft'\n  | 'landscapeRight';\n\n// @docsMissing\n/**\n * @hidden We do not expose related web methods in docs.\n * @platform web\n */\nexport type ImageSize = {\n  width: number;\n  height: number;\n};\n\n// @docsMissing\n/**\n * @hidden We do not expose related web methods in docs.\n * @platform web\n */\nexport type WebCameraSettings = {\n  autoFocus?: string;\n  flashMode?: string;\n  whiteBalance?: string;\n  exposureCompensation?: number;\n  colorTemperature?: number;\n  iso?: number;\n  brightness?: number;\n  contrast?: number;\n  saturation?: number;\n  sharpness?: number;\n  focusDistance?: number;\n  zoom?: number;\n};\n\n// @needsAudit\nexport type CameraCapturedPicture = {\n  /**\n   * Captured image width.\n   */\n  width: number;\n  /**\n   * Captured image height.\n   */\n  height: number;\n  /**\n   * On web, the value of `uri` is the same as `base64` because file system URLs are not supported in the browser.\n   */\n  uri: string;\n  /**\n   * A Base64 representation of the image.\n   */\n  base64?: string;\n  /**\n   * On Android and iOS this object may include various fields based on the device and operating system.\n   * On web, it is a partial representation of the [`MediaTrackSettings`](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings) dictionary.\n   */\n  exif?: Partial<MediaTrackSettings> | any;\n};\n\n// @needsAudit\nexport type CameraPictureOptions = {\n  /**\n   * Specify the compression quality from `0` to `1`. `0` means compress for small size, and `1` means compress for maximum quality.\n   */\n  quality?: number;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64?: boolean;\n  /**\n   * Whether to also include the EXIF data for the image.\n   */\n  exif?: boolean;\n  /**\n   * Additional EXIF data to be included for the image. Only useful when `exif` option is set to `true`.\n   * @platform android\n   * @platform ios\n   */\n  additionalExif?: Record<string, any>;\n  /**\n   * A callback invoked when picture is saved. If set, the promise of this method will resolve immediately with no data after picture is captured.\n   * The data that it should contain will be passed to this callback. If displaying or processing a captured photo right after taking it\n   * is not your case, this callback lets you skip waiting for it to be saved.\n   * @param picture\n   */\n  onPictureSaved?: (picture: CameraCapturedPicture) => void;\n  // TODO(Bacon): Is it possible to implement this in the browser?\n  /**\n   * If set to `true`, camera skips orientation adjustment and returns an image straight from the device's camera.\n   * If enabled, `quality` option is discarded (processing pipeline is skipped as a whole).\n   * Although enabling this option reduces image delivery time significantly, it may cause the image to appear in a wrong orientation\n   * in the `Image` component (at the time of writing, it does not respect EXIF orientation of the images).\n   * > **Note**: Enabling `skipProcessing` would cause orientation uncertainty. `Image` component does not respect EXIF\n   * > stored orientation information, that means obtained image would be displayed wrongly (rotated by 90¬∞, 180¬∞ or 270¬∞).\n   * > Different devices provide different orientations. For example some Sony Xperia or Samsung devices don't provide\n   * > correctly oriented images by default. To always obtain correctly oriented image disable `skipProcessing` option.\n   */\n  skipProcessing?: boolean;\n  /**\n   * @platform web\n   */\n  scale?: number;\n  /**\n   * @platform web\n   */\n  imageType?: ImageType;\n  /**\n   * @platform web\n   */\n  isImageMirror?: boolean;\n  /**\n   * When set to `true`, the output image will be flipped along the vertical axis when using the front camera.\n   * @default false\n   * @platform ios\n   * @platform android\n   * @deprecated Use `mirror` prop on `CameraView` instead.\n   */\n  mirror?: boolean;\n  /**\n   * @hidden\n   */\n  id?: number;\n  /**\n   * @hidden\n   */\n  fastMode?: boolean;\n  /**\n   * @hidden\n   */\n  maxDownsampling?: number;\n};\n\n// @needsAudit\nexport type CameraRecordingOptions = {\n  /**\n   * Maximum video duration in seconds.\n   */\n  maxDuration?: number;\n  /**\n   * Maximum video file size in bytes.\n   */\n  maxFileSize?: number;\n  /**\n   * If `true`, the recorded video will be flipped along the vertical axis. iOS flips videos recorded with the front camera by default,\n   * but you can reverse that back by setting this to `true`. On Android, this is handled in the user's device settings.\n   * @deprecated Use `mirror` prop on `CameraView` instead.\n   */\n  mirror?: boolean;\n  /**\n   * This option specifies what codec to use when recording the video. See [`VideoCodec`](#videocodec) for the possible values.\n   * @platform ios\n   */\n  codec?: VideoCodec;\n};\n\n/**\n * @hidden\n */\nexport type PictureSavedListener = (event: {\n  nativeEvent: { data: CameraCapturedPicture; id: number };\n}) => void;\n\n/**\n * @hidden\n */\nexport type CameraReadyListener = () => void;\n\n/**\n * @hidden\n */\nexport type ResponsiveOrientationChangedListener = (event: {\n  nativeEvent: ResponsiveOrientationChanged;\n}) => void;\n\nexport type ResponsiveOrientationChanged = { orientation: CameraOrientation };\n\n/**\n * @hidden\n */\nexport type MountErrorListener = (event: { nativeEvent: CameraMountError }) => void;\n\n// @docsMissing\nexport type CameraMountError = { message: string };\n\n// @docsMissing\nexport type Point = {\n  x: number;\n  y: number;\n};\n\nexport type BarcodeSize = {\n  /**\n   * The height value.\n   */\n  height: number;\n  /**\n   * The width value.\n   */\n  width: number;\n};\n\n/**\n * These coordinates are represented in the coordinate space of the camera source (e.g. when you\n * are using the camera view, these values are adjusted to the dimensions of the view).\n */\nexport type BarcodePoint = Point;\n\nexport type BarcodeBounds = {\n  /**\n   * The origin point of the bounding box.\n   */\n  origin: BarcodePoint;\n  /**\n   * The size of the bounding box.\n   */\n  size: BarcodeSize;\n};\n\n// @needsAudit\nexport type BarcodeScanningResult = {\n  /**\n   * The barcode type.\n   */\n  type: string;\n  /**\n   * The parsed information encoded in the barcode.\n   */\n  data: string;\n  /**\n   * The raw information encoded in the barcode.\n   * May be different from `data` depending on the barcode type.\n   * @platform android\n   * @hidden\n   */\n  raw?: string;\n  /**\n   * Corner points of the bounding box.\n   * `cornerPoints` is not always available and may be empty. On iOS, for `code39` and `pdf417`\n   * you don't get this value.\n   */\n  cornerPoints: BarcodePoint[];\n  /**\n   * The [BarcodeBounds](#barcodebounds) object.\n   * `bounds` in some case will be representing an empty rectangle.\n   * Moreover, `bounds` doesn't have to bound the whole barcode.\n   * For some types, they will represent the area used by the scanner.\n   */\n  bounds: BarcodeBounds;\n};\n\nexport type ScanningResult = Omit<BarcodeScanningResult, 'bounds'>;\n\n// @needsAudit\nexport type CameraProps = ViewProps & {\n  /**\n   * Camera facing. Use one of `CameraType`. When `front`, use the front-facing camera.\n   * When `back`, use the back-facing camera.\n   * @default 'back'\n   */\n  facing?: CameraType;\n  /**\n   * Camera flash mode. Use one of `FlashMode` values. When `on`, the flash on your device will\n   * turn on when taking a picture. When `off`, it won't. Setting it to `auto` will fire flash if required.\n   * @default 'off'\n   */\n  flash?: FlashMode;\n  /**\n   * A value between `0` and `1` being a percentage of device's max zoom. `0` - not zoomed, `1` - maximum zoom.\n   * @default 0\n   */\n  zoom?: number;\n  /**\n   * Used to select image or video output\n   * @default 'picture'\n   */\n  mode?: CameraMode;\n  /**\n   * If present, video will be recorded with no sound.\n   * @default false\n   */\n  mute?: boolean;\n  /**\n   * A boolean that determines whether the camera should mirror the image when using the front camera.\n   * @default false\n   */\n  mirror?: boolean;\n  /**\n   * Indicates the focus mode to use.\n   * @default off\n   * @platform ios\n   */\n  autofocus?: FocusMode;\n  /**\n   * A boolean that determines whether the camera should be active.\n   * Useful in situations where the camera may not have unmounted but you still want to stop the camera session.\n   * @default true\n   * @platform ios\n   */\n  active?: boolean;\n  /**\n   * Specify the quality of the recorded video. Use one of `VideoQuality` possible values:\n   * for 16:9 resolution `2160p`, `1080p`, `720p`, `480p` : `Android only` and for 4:3 `4:3` (the size is 640x480).\n   * If the chosen quality is not available for a device, the highest available is chosen.\n   */\n  videoQuality?: VideoQuality;\n  /**\n   * A boolean that determines whether the camera shutter animation should be enabled.\n   * @default true\n   */\n  animateShutter?: boolean;\n  /**\n   * A string representing the size of pictures [`takePictureAsync`](#takepictureasyncoptions) will take.\n   * Available sizes can be fetched with [`getAvailablePictureSizesAsync`](#getavailablepicturesizesasync).\n   * Setting this prop will cause the `ratio` prop to be ignored as the aspect ratio is determined by the selected size.\n   */\n  pictureSize?: string;\n  /**\n   * A boolean to enable or disable the torch\n   * @default false\n   */\n  enableTorch?: boolean;\n  /**\n   * The video stabilization mode used for a video recording. Use one of [`VideoStabilization.<value>`](#videostabilization).\n   * You can read more about each stabilization type in [Apple Documentation](https://developer.apple.com/documentation/avfoundation/avcapturevideostabilizationmode).\n   * @platform ios\n   */\n  videoStabilizationMode?: VideoStabilization;\n  /**\n   * @example\n   * ```tsx\n   * <CameraView\n   *   barcodeScannerSettings={{\n   *     barcodeTypes: [\"qr\"],\n   *   }}\n   * />\n   * ```\n   */\n  barcodeScannerSettings?: BarcodeSettings;\n  /**\n   * A URL for an image to be shown while the camera is loading.\n   * @platform web\n   */\n  poster?: string;\n  /**\n   * Whether to allow responsive orientation of the camera when the screen orientation is locked (i.e. when set to `true`\n   * landscape photos will be taken if the device is turned that way, even if the app or device orientation is locked to portrait)\n   * @platform ios\n   */\n  responsiveOrientationWhenOrientationLocked?: boolean;\n  /**\n   * A string representing the aspect ratio of the preview. For example, `4:3` and `16:9`.\n   * Note: Setting the aspect ratio here will change the scaleType of the camera preview from `FILL` to `FIT`.\n   * @default 1:1\n   * @platform android\n   */\n  ratio?: CameraRatio;\n  /**\n   * Callback invoked when camera preview has been set.\n   */\n  onCameraReady?: () => void;\n  /**\n   * Callback invoked when camera preview could not start.\n   * @param event Error object that contains a `message`.\n   */\n  onMountError?: (event: CameraMountError) => void;\n  /**\n   * Callback that is invoked when a barcode has been successfully scanned. The callback is provided with\n   * an object of the [`BarcodeScanningResult`](#barcodescanningresult) shape, where the `type`\n   * refers to the barcode type that was scanned, and the `data` is the information encoded in the barcode\n   * (in this case of QR codes, this is often a URL). See [`BarcodeType`](#barcodetype) for supported values.\n   * for supported values.\n   * @param scanningResult\n   */\n  onBarcodeScanned?: (scanningResult: BarcodeScanningResult) => void;\n  /**\n   * Callback invoked when responsive orientation changes. Only applicable if `responsiveOrientationWhenOrientationLocked` is `true`\n   * @param event result object that contains updated orientation of camera\n   * @platform ios\n   */\n  onResponsiveOrientationChanged?: (event: ResponsiveOrientationChanged) => void;\n};\n\n/**\n * @hidden\n */\nexport interface CameraViewRef {\n  readonly takePicture: (options: CameraPictureOptions) => Promise<CameraCapturedPicture>;\n  readonly getAvailablePictureSizes: () => Promise<string[]>;\n  readonly record: (options?: CameraRecordingOptions) => Promise<{ uri: string }>;\n  readonly stopRecording: () => Promise<void>;\n  readonly launchModernScanner: () => Promise<void>;\n  readonly resumePreview: () => Promise<void>;\n  readonly pausePreview: () => Promise<void>;\n}\n\n/**\n * @hidden\n */\nexport type CameraNativeProps = {\n  pointerEvents?: any;\n  style?: any;\n  ref?: Ref<CameraViewRef>;\n  onCameraReady?: CameraReadyListener;\n  onMountError?: MountErrorListener;\n  onBarcodeScanned?: (event: { nativeEvent: BarcodeScanningResult }) => void;\n  onPictureSaved?: PictureSavedListener;\n  onResponsiveOrientationChanged?: ResponsiveOrientationChangedListener;\n  facing?: string;\n  flashMode?: string;\n  enableTorch?: boolean;\n  animateShutter?: boolean;\n  autoFocus?: FocusMode;\n  mute?: boolean;\n  zoom?: number;\n  ratio?: CameraRatio;\n  barcodeScannerSettings?: BarcodeSettings;\n  barcodeScannerEnabled?: boolean;\n  poster?: string;\n  responsiveOrientationWhenOrientationLocked?: boolean;\n};\n\n// @docsMissing\nexport type BarcodeSettings = {\n  barcodeTypes: BarcodeType[];\n};\n\n/**\n * @platform ios\n */\nexport type ScanningOptions = {\n  /**\n   * The type of codes to scan for.\n   */\n  barcodeTypes: BarcodeType[];\n  /**\n   * Indicates whether people can use a two-finger pinch-to-zoom gesture.\n   * @default true\n   */\n  isPinchToZoomEnabled?: boolean;\n  /**\n   * Guidance text, such as ‚ÄúSlow Down,‚Äù appears over the live video.\n   * @default true\n   */\n  isGuidanceEnabled?: boolean;\n  /**\n   * Indicates whether the scanner displays highlights around recognized items.\n   * @default false\n   */\n  isHighlightingEnabled?: boolean;\n};\n\n/**\n * The available barcode types that can be scanned.\n */\nexport type BarcodeType =\n  | 'aztec'\n  | 'ean13'\n  | 'ean8'\n  | 'qr'\n  | 'pdf417'\n  | 'upc_e'\n  | 'datamatrix'\n  | 'code39'\n  | 'code93'\n  | 'itf14'\n  | 'codabar'\n  | 'code128'\n  | 'upc_a';\n\nexport {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  EventSubscription as Subscription,\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/CameraView.d.ts b/node_modules/expo-camera/build/CameraView.d.ts
index be810b2..575ed7b 100644
--- a/node_modules/expo-camera/build/CameraView.d.ts
+++ b/node_modules/expo-camera/build/CameraView.d.ts
@@ -1,8 +1,7 @@
-import { Subscription } from 'expo-modules-core';
-import * as React from 'react';
-import { Ref } from 'react';
+import { type EventSubscription } from 'expo-modules-core';
+import { type Ref, Component } from 'react';
 import { CameraCapturedPicture, CameraOrientation, CameraPictureOptions, CameraProps, CameraRecordingOptions, CameraViewRef, ScanningOptions, ScanningResult, VideoCodec } from './Camera.types';
-export default class CameraView extends React.Component<CameraProps> {
+export default class CameraView extends Component<CameraProps> {
     /**
      * Property that determines if the current device has the ability to use `DataScannerViewController` (iOS 16+).
      */
@@ -26,13 +25,21 @@ export default class CameraView extends React.Component<CameraProps> {
      * The list varies across Android devices but is the same for every iOS.
      */
     getAvailablePictureSizesAsync(): Promise<string[]>;
+    /**
+     * Resumes the camera preview.
+     */
+    resumePreview(): Promise<void>;
+    /**
+     * Pauses the camera preview. It is not recommended to use `takePictureAsync` when preview is paused.
+     */
+    pausePreview(): Promise<void>;
     static ConversionTables: {
         type: Record<number | typeof Symbol.iterator | "toString" | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substring" | "toLowerCase" | "toLocaleLowerCase" | "toUpperCase" | "toLocaleUpperCase" | "trim" | "length" | "substr" | "valueOf" | "codePointAt" | "includes" | "endsWith" | "normalize" | "repeat" | "startsWith" | "anchor" | "big" | "blink" | "bold" | "fixed" | "fontcolor" | "fontsize" | "italics" | "link" | "small" | "strike" | "sub" | "sup" | "padStart" | "padEnd" | "trimEnd" | "trimStart" | "trimLeft" | "trimRight" | "matchAll" | "replaceAll" | "at", string | undefined>;
         flash: Record<number | typeof Symbol.iterator | "toString" | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substring" | "toLowerCase" | "toLocaleLowerCase" | "toUpperCase" | "toLocaleUpperCase" | "trim" | "length" | "substr" | "valueOf" | "codePointAt" | "includes" | "endsWith" | "normalize" | "repeat" | "startsWith" | "anchor" | "big" | "blink" | "bold" | "fixed" | "fontcolor" | "fontsize" | "italics" | "link" | "small" | "strike" | "sub" | "sup" | "padStart" | "padEnd" | "trimEnd" | "trimStart" | "trimLeft" | "trimRight" | "matchAll" | "replaceAll" | "at", string | undefined>;
     };
     static defaultProps: CameraProps;
     _cameraHandle?: number | null;
-    _cameraRef: React.RefObject<CameraViewRef>;
+    _cameraRef: import("react").RefObject<CameraViewRef>;
     _lastEvents: {
         [eventName: string]: string;
     };
@@ -41,19 +48,24 @@ export default class CameraView extends React.Component<CameraProps> {
     };
     /**
      * Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation
-     * (if `options.skipProcessing` flag is not enabled) and scaled to match the preview. Anyway on Android it is essential
-     * to set ratio prop to get a picture with correct dimensions.
+     * (if `options.skipProcessing` flag is not enabled) and scaled to match the preview.
      * > **Note**: Make sure to wait for the [`onCameraReady`](#oncameraready) callback before calling this method.
      * @param options An object in form of `CameraPictureOptions` type.
-     * @return Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on iOS,
-     * Android, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify
-     * the dimensions of the image. `base64` is included if the `base64` option was truthy, and is a string containing the JPEG data
-     * of the image in Base64--prepend that with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source
-     * for an `Image` element for example. `exif` is included if the `exif` option was truthy, and is an object containing EXIF
-     * data for the image--the names of its properties are EXIF tags and their values are the values for those tags.
+     * @return Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on Android,
+     * iOS, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify
+     * the dimensions of the image.
+     *
+     * `base64` is included if the `base64` option was truthy, and is a string containing the JPEG data
+     * of the image in Base64. Prepend it with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source
+     * for an `Image` element for example.
+     *
+     * `exif` is included if the `exif` option was truthy, and is an object containing EXIF
+     * data for the image. The names of its properties are EXIF tags and their values are the values for those tags.
      *
      * > On native platforms, the local image URI is temporary. Use [`FileSystem.copyAsync`](filesystem/#filesystemcopyasyncoptions)
      * > to make a permanent copy of the image.
+     *
+     * **Note** Avoid calling this method while the preview is paused. On iOS, this will take a picture of the last frame that is currently on screen, on Android, this will throw an error.
      */
     takePictureAsync(options?: CameraPictureOptions): Promise<CameraCapturedPicture | undefined>;
     /**
@@ -62,7 +74,7 @@ export default class CameraView extends React.Component<CameraProps> {
      */
     static launchScanner(options?: ScanningOptions): Promise<void>;
     /**
-     * Dimiss the scanner presented by `launchScanner`.
+     * Dismiss the scanner presented by `launchScanner`.
      * @platform ios
      */
     static dismissScanner(): Promise<void>;
@@ -74,7 +86,7 @@ export default class CameraView extends React.Component<CameraProps> {
      *
      * @platform ios
      */
-    static onModernBarcodeScanned(listener: (event: ScanningResult) => void): Subscription;
+    static onModernBarcodeScanned(listener: (event: ScanningResult) => void): EventSubscription;
     /**
      * Starts recording a video that will be saved to cache directory. Videos are rotated to match device's orientation.
      * Flipping camera during a recording results in stopping it.
@@ -106,6 +118,6 @@ export default class CameraView extends React.Component<CameraProps> {
         nativeEvent: any;
     }) => void;
     _setReference: (ref: Ref<CameraViewRef>) => void;
-    render(): JSX.Element;
+    render(): import("react").JSX.Element;
 }
 //# sourceMappingURL=CameraView.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/CameraView.d.ts.map b/node_modules/expo-camera/build/CameraView.d.ts.map
index 8461cc0..0923f50 100644
--- a/node_modules/expo-camera/build/CameraView.d.ts.map
+++ b/node_modules/expo-camera/build/CameraView.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"CameraView.d.ts","sourceRoot":"","sources":["../src/CameraView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAA+C,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAC9F,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAE5B,OAAO,EACL,qBAAqB,EACrB,iBAAiB,EACjB,oBAAoB,EACpB,WAAW,EACX,sBAAsB,EACtB,aAAa,EACb,eAAe,EACf,cAAc,EACd,UAAU,EACX,MAAM,gBAAgB,CAAC;AAoDxB,MAAM,CAAC,OAAO,OAAO,UAAW,SAAQ,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC;IAClE;;OAEG;IACH,MAAM,CAAC,+BAA+B,EAAE,OAAO,CAAiD;IAChG;;;;;OAKG;WACU,gBAAgB,IAAI,OAAO,CAAC,OAAO,CAAC;IASjD;;;;OAIG;WACU,4BAA4B,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;IAQlE;;;;OAIG;IACG,6BAA6B,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAKxD,MAAM,CAAC,gBAAgB;;;MAAoB;IAE3C,MAAM,CAAC,YAAY,EAAE,WAAW,CAM9B;IAEF,aAAa,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IAC9B,UAAU,iCAAoC;IAC9C,WAAW,EAAE;QAAE,CAAC,SAAS,EAAE,MAAM,GAAG,MAAM,CAAA;KAAE,CAAM;IAClD,gBAAgB,EAAE;QAAE,CAAC,SAAS,EAAE,MAAM,GAAG,IAAI,CAAA;KAAE,CAAM;IAGrD;;;;;;;;;;;;;;;OAeG;IACG,gBAAgB,CACpB,OAAO,CAAC,EAAE,oBAAoB,GAC7B,OAAO,CAAC,qBAAqB,GAAG,SAAS,CAAC;IAM7C;;;OAGG;WACU,aAAa,CAAC,OAAO,CAAC,EAAE,eAAe,GAAG,OAAO,CAAC,IAAI,CAAC;IASpE;;;OAGG;WACU,cAAc,IAAI,OAAO,CAAC,IAAI,CAAC;IAM5C;;;;;;;OAOG;IACH,MAAM,CAAC,sBAAsB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,cAAc,KAAK,IAAI,GAAG,YAAY;IAItF;;;;;;;;OAQG;IACG,WAAW,CAAC,OAAO,CAAC,EAAE,sBAAsB,GAAG,OAAO,CAAC;QAAE,GAAG,EAAE,MAAM,CAAA;KAAE,GAAG,SAAS,CAAC;IAKzF;;OAEG;IACH,aAAa;IAIb,cAAc,aAIZ;IAEF,aAAa;qBAAoC;YAAE,OAAO,EAAE,MAAM,CAAA;SAAE;eAIlE;IAEF,+BAA+B;qBAGhB;YAAE,aAAa,iBAAiB,CAAA;SAAE;eAK/C;IAEF,iBAAiB,cACH,QAAQ;qBACa,GAAG;eAgBlC;IAEJ,aAAa,QAAS,IAAI,aAAa,CAAC,UAOtC;IAEF,MAAM;CAkBP"}
\ No newline at end of file
+{"version":3,"file":"CameraView.d.ts","sourceRoot":"","sources":["../src/CameraView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAiC,KAAK,iBAAiB,EAAE,MAAM,mBAAmB,CAAC;AAC1F,OAAO,EAAE,KAAK,GAAG,EAAE,SAAS,EAAa,MAAM,OAAO,CAAC;AAEvD,OAAO,EACL,qBAAqB,EACrB,iBAAiB,EACjB,oBAAoB,EACpB,WAAW,EACX,sBAAsB,EACtB,aAAa,EACb,eAAe,EACf,cAAc,EACd,UAAU,EACX,MAAM,gBAAgB,CAAC;AA+DxB,MAAM,CAAC,OAAO,OAAO,UAAW,SAAQ,SAAS,CAAC,WAAW,CAAC;IAC5D;;OAEG;IACH,MAAM,CAAC,+BAA+B,EAAE,OAAO,CAAiD;IAChG;;;;;OAKG;WACU,gBAAgB,IAAI,OAAO,CAAC,OAAO,CAAC;IASjD;;;;OAIG;WACU,4BAA4B,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;IAQlE;;;;OAIG;IACG,6BAA6B,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAIxD;;OAEG;IACG,aAAa,IAAI,OAAO,CAAC,IAAI,CAAC;IAIpC;;OAEG;IACG,YAAY,IAAI,OAAO,CAAC,IAAI,CAAC;IAKnC,MAAM,CAAC,gBAAgB;;;MAAoB;IAE3C,MAAM,CAAC,YAAY,EAAE,WAAW,CAM9B;IAEF,aAAa,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IAC9B,UAAU,2CAA8B;IACxC,WAAW,EAAE;QAAE,CAAC,SAAS,EAAE,MAAM,GAAG,MAAM,CAAA;KAAE,CAAM;IAClD,gBAAgB,EAAE;QAAE,CAAC,SAAS,EAAE,MAAM,GAAG,IAAI,CAAA;KAAE,CAAM;IAGrD;;;;;;;;;;;;;;;;;;;;OAoBG;IACG,gBAAgB,CAAC,OAAO,CAAC,EAAE,oBAAoB;IAMrD;;;OAGG;WACU,aAAa,CAAC,OAAO,CAAC,EAAE,eAAe,GAAG,OAAO,CAAC,IAAI,CAAC;IASpE;;;OAGG;WACU,cAAc,IAAI,OAAO,CAAC,IAAI,CAAC;IAM5C;;;;;;;OAOG;IACH,MAAM,CAAC,sBAAsB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,cAAc,KAAK,IAAI,GAAG,iBAAiB;IAI3F;;;;;;;;OAQG;IACG,WAAW,CAAC,OAAO,CAAC,EAAE,sBAAsB;;;IAKlD;;OAEG;IACH,aAAa;IAIb,cAAc,aAIZ;IAEF,aAAa;qBAAoC;YAAE,OAAO,EAAE,MAAM,CAAA;SAAE;eAIlE;IAEF,+BAA+B;qBAGhB;YAAE,aAAa,iBAAiB,CAAA;SAAE;eAK/C;IAEF,iBAAiB,cACH,QAAQ;qBACa,GAAG;eAgBlC;IAEJ,aAAa,QAAS,IAAI,aAAa,CAAC,UAOtC;IAEF,MAAM;CAkBP"}
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/CameraView.js b/node_modules/expo-camera/build/CameraView.js
index 1957395..460c096 100644
--- a/node_modules/expo-camera/build/CameraView.js
+++ b/node_modules/expo-camera/build/CameraView.js
@@ -1,31 +1,37 @@
-import { Platform, UnavailabilityError, EventEmitter } from 'expo-modules-core';
-import * as React from 'react';
+import { Platform, UnavailabilityError } from 'expo-modules-core';
+import { Component, createRef } from 'react';
 import ExpoCamera from './ExpoCamera';
 import CameraManager from './ExpoCameraManager';
 import { ConversionTables, ensureNativeProps } from './utils/props';
-const emitter = new EventEmitter(CameraManager);
 const EventThrottleMs = 500;
 const _PICTURE_SAVED_CALLBACKS = {};
 let _GLOBAL_PICTURE_ID = 1;
 function ensurePictureOptions(options) {
-    const pictureOptions = !options || typeof options !== 'object' ? {} : options;
-    if (!pictureOptions.quality) {
-        pictureOptions.quality = 1;
+    if (!options || typeof options !== 'object') {
+        return {};
     }
-    if (pictureOptions.onPictureSaved) {
+    if (!options.quality) {
+        options.quality = 1;
+    }
+    if (options.mirror) {
+        console.warn('The `mirror` option is deprecated. Please use the `mirror` prop on the `CameraView` instead.');
+    }
+    if (options.onPictureSaved) {
         const id = _GLOBAL_PICTURE_ID++;
-        _PICTURE_SAVED_CALLBACKS[id] = pictureOptions.onPictureSaved;
-        pictureOptions.id = id;
-        pictureOptions.fastMode = true;
+        _PICTURE_SAVED_CALLBACKS[id] = options.onPictureSaved;
+        options.id = id;
+        options.fastMode = true;
     }
-    return pictureOptions;
+    return options;
 }
-function ensureRecordingOptions(options) {
-    let recordingOptions = options || {};
-    if (!recordingOptions || typeof recordingOptions !== 'object') {
-        recordingOptions = {};
+function ensureRecordingOptions(options = {}) {
+    if (!options || typeof options !== 'object') {
+        return {};
+    }
+    if (options.mirror) {
+        console.warn('The `mirror` option is deprecated. Please use the `mirror` prop on the `CameraView` instead.');
     }
-    return recordingOptions;
+    return options;
 }
 function _onPictureSaved({ nativeEvent, }) {
     const { id, data } = nativeEvent;
@@ -35,7 +41,7 @@ function _onPictureSaved({ nativeEvent, }) {
         delete _PICTURE_SAVED_CALLBACKS[id];
     }
 }
-export default class CameraView extends React.Component {
+export default class CameraView extends Component {
     /**
      * Property that determines if the current device has the ability to use `DataScannerViewController` (iOS 16+).
      */
@@ -72,6 +78,18 @@ export default class CameraView extends React.Component {
     async getAvailablePictureSizesAsync() {
         return (await this._cameraRef.current?.getAvailablePictureSizes()) ?? [];
     }
+    /**
+     * Resumes the camera preview.
+     */
+    async resumePreview() {
+        return this._cameraRef.current?.resumePreview();
+    }
+    /**
+     * Pauses the camera preview. It is not recommended to use `takePictureAsync` when preview is paused.
+     */
+    async pausePreview() {
+        return this._cameraRef.current?.pausePreview();
+    }
     // Values under keys from this object will be transformed to native options
     static ConversionTables = ConversionTables;
     static defaultProps = {
@@ -82,29 +100,34 @@ export default class CameraView extends React.Component {
         flash: 'off',
     };
     _cameraHandle;
-    _cameraRef = React.createRef();
+    _cameraRef = createRef();
     _lastEvents = {};
     _lastEventsTimes = {};
     // @needsAudit
     /**
      * Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation
-     * (if `options.skipProcessing` flag is not enabled) and scaled to match the preview. Anyway on Android it is essential
-     * to set ratio prop to get a picture with correct dimensions.
+     * (if `options.skipProcessing` flag is not enabled) and scaled to match the preview.
      * > **Note**: Make sure to wait for the [`onCameraReady`](#oncameraready) callback before calling this method.
      * @param options An object in form of `CameraPictureOptions` type.
-     * @return Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on iOS,
-     * Android, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify
-     * the dimensions of the image. `base64` is included if the `base64` option was truthy, and is a string containing the JPEG data
-     * of the image in Base64--prepend that with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source
-     * for an `Image` element for example. `exif` is included if the `exif` option was truthy, and is an object containing EXIF
-     * data for the image--the names of its properties are EXIF tags and their values are the values for those tags.
+     * @return Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on Android,
+     * iOS, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify
+     * the dimensions of the image.
+     *
+     * `base64` is included if the `base64` option was truthy, and is a string containing the JPEG data
+     * of the image in Base64. Prepend it with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source
+     * for an `Image` element for example.
+     *
+     * `exif` is included if the `exif` option was truthy, and is an object containing EXIF
+     * data for the image. The names of its properties are EXIF tags and their values are the values for those tags.
      *
      * > On native platforms, the local image URI is temporary. Use [`FileSystem.copyAsync`](filesystem/#filesystemcopyasyncoptions)
      * > to make a permanent copy of the image.
+     *
+     * **Note** Avoid calling this method while the preview is paused. On iOS, this will take a picture of the last frame that is currently on screen, on Android, this will throw an error.
      */
     async takePictureAsync(options) {
         const pictureOptions = ensurePictureOptions(options);
-        return await this._cameraRef.current?.takePicture(pictureOptions);
+        return this._cameraRef.current?.takePicture(pictureOptions);
     }
     /**
      * Presents a modal view controller that uses the [`DataScannerViewController`](https://developer.apple.com/documentation/visionkit/scanning_data_with_the_camera) available on iOS 16+.
@@ -119,7 +142,7 @@ export default class CameraView extends React.Component {
         }
     }
     /**
-     * Dimiss the scanner presented by `launchScanner`.
+     * Dismiss the scanner presented by `launchScanner`.
      * @platform ios
      */
     static async dismissScanner() {
@@ -136,7 +159,7 @@ export default class CameraView extends React.Component {
      * @platform ios
      */
     static onModernBarcodeScanned(listener) {
-        return emitter.addListener('onModernBarcodeScanned', listener);
+        return CameraManager.addListener('onModernBarcodeScanned', listener);
     }
     /**
      * Starts recording a video that will be saved to cache directory. Videos are rotated to match device's orientation.
@@ -149,7 +172,7 @@ export default class CameraView extends React.Component {
      */
     async recordAsync(options) {
         const recordingOptions = ensureRecordingOptions(options);
-        return await this._cameraRef.current?.record(recordingOptions);
+        return this._cameraRef.current?.record(recordingOptions);
     }
     /**
      * Stops recording if any is in progress.
diff --git a/node_modules/expo-camera/build/CameraView.js.map b/node_modules/expo-camera/build/CameraView.js.map
index f445535..fb149f8 100644
--- a/node_modules/expo-camera/build/CameraView.js.map
+++ b/node_modules/expo-camera/build/CameraView.js.map
@@ -1 +1 @@
-{"version":3,"file":"CameraView.js","sourceRoot":"","sources":["../src/CameraView.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Platform, UnavailabilityError, EventEmitter, Subscription } from 'expo-modules-core';\nimport * as React from 'react';\nimport { Ref } from 'react';\n\nimport {\n  CameraCapturedPicture,\n  CameraOrientation,\n  CameraPictureOptions,\n  CameraProps,\n  CameraRecordingOptions,\n  CameraViewRef,\n  ScanningOptions,\n  ScanningResult,\n  VideoCodec,\n} from './Camera.types';\nimport ExpoCamera from './ExpoCamera';\nimport CameraManager from './ExpoCameraManager';\nimport { ConversionTables, ensureNativeProps } from './utils/props';\n\nconst emitter = new EventEmitter(CameraManager);\n\nconst EventThrottleMs = 500;\n\nconst _PICTURE_SAVED_CALLBACKS = {};\n\nlet _GLOBAL_PICTURE_ID = 1;\n\nfunction ensurePictureOptions(options?: CameraPictureOptions): CameraPictureOptions {\n  const pictureOptions: CameraPictureOptions =\n    !options || typeof options !== 'object' ? {} : options;\n\n  if (!pictureOptions.quality) {\n    pictureOptions.quality = 1;\n  }\n  if (pictureOptions.onPictureSaved) {\n    const id = _GLOBAL_PICTURE_ID++;\n    _PICTURE_SAVED_CALLBACKS[id] = pictureOptions.onPictureSaved;\n    pictureOptions.id = id;\n    pictureOptions.fastMode = true;\n  }\n  return pictureOptions;\n}\n\nfunction ensureRecordingOptions(options?: CameraRecordingOptions): CameraRecordingOptions {\n  let recordingOptions = options || {};\n\n  if (!recordingOptions || typeof recordingOptions !== 'object') {\n    recordingOptions = {};\n  }\n\n  return recordingOptions;\n}\n\nfunction _onPictureSaved({\n  nativeEvent,\n}: {\n  nativeEvent: { data: CameraCapturedPicture; id: number };\n}) {\n  const { id, data } = nativeEvent;\n  const callback = _PICTURE_SAVED_CALLBACKS[id];\n  if (callback) {\n    callback(data);\n    delete _PICTURE_SAVED_CALLBACKS[id];\n  }\n}\n\nexport default class CameraView extends React.Component<CameraProps> {\n  /**\n   * Property that determines if the current device has the ability to use `DataScannerViewController` (iOS 16+).\n   */\n  static isModernBarcodeScannerAvailable: boolean = CameraManager.isModernBarcodeScannerAvailable;\n  /**\n   * Check whether the current device has a camera. This is useful for web and simulators cases.\n   * This isn't influenced by the Permissions API (all platforms), or HTTP usage (in the browser).\n   * You will still need to check if the native permission has been accepted.\n   * @platform web\n   */\n  static async isAvailableAsync(): Promise<boolean> {\n    if (!CameraManager.isAvailableAsync) {\n      throw new UnavailabilityError('expo-camera', 'isAvailableAsync');\n    }\n\n    return await CameraManager.isAvailableAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Queries the device for the available video codecs that can be used in video recording.\n   * @return A promise that resolves to a list of strings that represents available codecs.\n   * @platform ios\n   */\n  static async getAvailableVideoCodecsAsync(): Promise<VideoCodec[]> {\n    if (!CameraManager.getAvailableVideoCodecsAsync) {\n      throw new UnavailabilityError('Camera', 'getAvailableVideoCodecsAsync');\n    }\n\n    return await CameraManager.getAvailableVideoCodecsAsync();\n  }\n\n  /**\n   * Get picture sizes that are supported by the device.\n   * @return Returns a Promise that resolves to an array of strings representing picture sizes that can be passed to `pictureSize` prop.\n   * The list varies across Android devices but is the same for every iOS.\n   */\n  async getAvailablePictureSizesAsync(): Promise<string[]> {\n    return (await this._cameraRef.current?.getAvailablePictureSizes()) ?? [];\n  }\n\n  // Values under keys from this object will be transformed to native options\n  static ConversionTables = ConversionTables;\n\n  static defaultProps: CameraProps = {\n    zoom: 0,\n    facing: 'back',\n    enableTorch: false,\n    mode: 'picture',\n    flash: 'off',\n  };\n\n  _cameraHandle?: number | null;\n  _cameraRef = React.createRef<CameraViewRef>();\n  _lastEvents: { [eventName: string]: string } = {};\n  _lastEventsTimes: { [eventName: string]: Date } = {};\n\n  // @needsAudit\n  /**\n   * Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation\n   * (if `options.skipProcessing` flag is not enabled) and scaled to match the preview. Anyway on Android it is essential\n   * to set ratio prop to get a picture with correct dimensions.\n   * > **Note**: Make sure to wait for the [`onCameraReady`](#oncameraready) callback before calling this method.\n   * @param options An object in form of `CameraPictureOptions` type.\n   * @return Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on iOS,\n   * Android, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify\n   * the dimensions of the image. `base64` is included if the `base64` option was truthy, and is a string containing the JPEG data\n   * of the image in Base64--prepend that with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source\n   * for an `Image` element for example. `exif` is included if the `exif` option was truthy, and is an object containing EXIF\n   * data for the image--the names of its properties are EXIF tags and their values are the values for those tags.\n   *\n   * > On native platforms, the local image URI is temporary. Use [`FileSystem.copyAsync`](filesystem/#filesystemcopyasyncoptions)\n   * > to make a permanent copy of the image.\n   */\n  async takePictureAsync(\n    options?: CameraPictureOptions\n  ): Promise<CameraCapturedPicture | undefined> {\n    const pictureOptions = ensurePictureOptions(options);\n\n    return await this._cameraRef.current?.takePicture(pictureOptions);\n  }\n\n  /**\n   * Presents a modal view controller that uses the [`DataScannerViewController`](https://developer.apple.com/documentation/visionkit/scanning_data_with_the_camera) available on iOS 16+.\n   * @platform ios\n   */\n  static async launchScanner(options?: ScanningOptions): Promise<void> {\n    if (!options) {\n      options = { barcodeTypes: [] };\n    }\n    if (Platform.OS === 'ios' && CameraView.isModernBarcodeScannerAvailable) {\n      await CameraManager.launchScanner(options);\n    }\n  }\n\n  /**\n   * Dimiss the scanner presented by `launchScanner`.\n   * @platform ios\n   */\n  static async dismissScanner(): Promise<void> {\n    if (Platform.OS === 'ios' && CameraView.isModernBarcodeScannerAvailable) {\n      await CameraManager.dismissScanner();\n    }\n  }\n\n  /**\n   * Invokes the `listener` function when a bar code has been successfully scanned. The callback is provided with\n   * an object of the `ScanningResult` shape, where the `type` refers to the bar code type that was scanned and the `data` is the information encoded in the bar code\n   * (in this case of QR codes, this is often a URL). See [`BarcodeType`](#barcodetype) for supported values.\n   * @param listener Invoked with the [ScanningResult](#scanningresult) when a bar code has been successfully scanned.\n   *\n   * @platform ios\n   */\n  static onModernBarcodeScanned(listener: (event: ScanningResult) => void): Subscription {\n    return emitter.addListener<ScanningResult>('onModernBarcodeScanned', listener);\n  }\n\n  /**\n   * Starts recording a video that will be saved to cache directory. Videos are rotated to match device's orientation.\n   * Flipping camera during a recording results in stopping it.\n   * @param options A map of `CameraRecordingOptions` type.\n   * @return Returns a Promise that resolves to an object containing video file `uri` property and a `codec` property on iOS.\n   * The Promise is returned if `stopRecording` was invoked, one of `maxDuration` and `maxFileSize` is reached or camera preview is stopped.\n   * @platform android\n   * @platform ios\n   */\n  async recordAsync(options?: CameraRecordingOptions): Promise<{ uri: string } | undefined> {\n    const recordingOptions = ensureRecordingOptions(options);\n    return await this._cameraRef.current?.record(recordingOptions);\n  }\n\n  /**\n   * Stops recording if any is in progress.\n   */\n  stopRecording() {\n    this._cameraRef.current?.stopRecording();\n  }\n\n  _onCameraReady = () => {\n    if (this.props.onCameraReady) {\n      this.props.onCameraReady();\n    }\n  };\n\n  _onMountError = ({ nativeEvent }: { nativeEvent: { message: string } }) => {\n    if (this.props.onMountError) {\n      this.props.onMountError(nativeEvent);\n    }\n  };\n\n  _onResponsiveOrientationChanged = ({\n    nativeEvent,\n  }: {\n    nativeEvent: { orientation: CameraOrientation };\n  }) => {\n    if (this.props.onResponsiveOrientationChanged) {\n      this.props.onResponsiveOrientationChanged(nativeEvent);\n    }\n  };\n\n  _onObjectDetected =\n    (callback?: Function) =>\n    ({ nativeEvent }: { nativeEvent: any }) => {\n      const { type } = nativeEvent;\n      if (\n        this._lastEvents[type] &&\n        this._lastEventsTimes[type] &&\n        JSON.stringify(nativeEvent) === this._lastEvents[type] &&\n        new Date().getTime() - this._lastEventsTimes[type].getTime() < EventThrottleMs\n      ) {\n        return;\n      }\n\n      if (callback) {\n        callback(nativeEvent);\n        this._lastEventsTimes[type] = new Date();\n        this._lastEvents[type] = JSON.stringify(nativeEvent);\n      }\n    };\n\n  _setReference = (ref: Ref<CameraViewRef>) => {\n    if (ref) {\n      // TODO(Bacon): Unify these - perhaps with hooks?\n      if (Platform.OS === 'web') {\n        this._cameraHandle = ref as any;\n      }\n    }\n  };\n\n  render() {\n    const nativeProps = ensureNativeProps(this.props);\n    const onBarcodeScanned = this.props.onBarcodeScanned\n      ? this._onObjectDetected(this.props.onBarcodeScanned)\n      : undefined;\n\n    return (\n      <ExpoCamera\n        {...nativeProps}\n        ref={this._cameraRef}\n        onCameraReady={this._onCameraReady}\n        onMountError={this._onMountError}\n        onBarcodeScanned={onBarcodeScanned}\n        onPictureSaved={_onPictureSaved}\n        onResponsiveOrientationChanged={this._onResponsiveOrientationChanged}\n      />\n    );\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"CameraView.js","sourceRoot":"","sources":["../src/CameraView.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Platform, UnavailabilityError, type EventSubscription } from 'expo-modules-core';\nimport { type Ref, Component, createRef } from 'react';\n\nimport {\n  CameraCapturedPicture,\n  CameraOrientation,\n  CameraPictureOptions,\n  CameraProps,\n  CameraRecordingOptions,\n  CameraViewRef,\n  ScanningOptions,\n  ScanningResult,\n  VideoCodec,\n} from './Camera.types';\nimport ExpoCamera from './ExpoCamera';\nimport CameraManager from './ExpoCameraManager';\nimport { ConversionTables, ensureNativeProps } from './utils/props';\n\nconst EventThrottleMs = 500;\n\nconst _PICTURE_SAVED_CALLBACKS = {};\n\nlet _GLOBAL_PICTURE_ID = 1;\n\nfunction ensurePictureOptions(options?: CameraPictureOptions): CameraPictureOptions {\n  if (!options || typeof options !== 'object') {\n    return {};\n  }\n\n  if (!options.quality) {\n    options.quality = 1;\n  }\n\n  if (options.mirror) {\n    console.warn(\n      'The `mirror` option is deprecated. Please use the `mirror` prop on the `CameraView` instead.'\n    );\n  }\n\n  if (options.onPictureSaved) {\n    const id = _GLOBAL_PICTURE_ID++;\n    _PICTURE_SAVED_CALLBACKS[id] = options.onPictureSaved;\n    options.id = id;\n    options.fastMode = true;\n  }\n\n  return options;\n}\n\nfunction ensureRecordingOptions(options: CameraRecordingOptions = {}): CameraRecordingOptions {\n  if (!options || typeof options !== 'object') {\n    return {};\n  }\n\n  if (options.mirror) {\n    console.warn(\n      'The `mirror` option is deprecated. Please use the `mirror` prop on the `CameraView` instead.'\n    );\n  }\n\n  return options;\n}\n\nfunction _onPictureSaved({\n  nativeEvent,\n}: {\n  nativeEvent: { data: CameraCapturedPicture; id: number };\n}) {\n  const { id, data } = nativeEvent;\n  const callback = _PICTURE_SAVED_CALLBACKS[id];\n  if (callback) {\n    callback(data);\n    delete _PICTURE_SAVED_CALLBACKS[id];\n  }\n}\n\nexport default class CameraView extends Component<CameraProps> {\n  /**\n   * Property that determines if the current device has the ability to use `DataScannerViewController` (iOS 16+).\n   */\n  static isModernBarcodeScannerAvailable: boolean = CameraManager.isModernBarcodeScannerAvailable;\n  /**\n   * Check whether the current device has a camera. This is useful for web and simulators cases.\n   * This isn't influenced by the Permissions API (all platforms), or HTTP usage (in the browser).\n   * You will still need to check if the native permission has been accepted.\n   * @platform web\n   */\n  static async isAvailableAsync(): Promise<boolean> {\n    if (!CameraManager.isAvailableAsync) {\n      throw new UnavailabilityError('expo-camera', 'isAvailableAsync');\n    }\n\n    return await CameraManager.isAvailableAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Queries the device for the available video codecs that can be used in video recording.\n   * @return A promise that resolves to a list of strings that represents available codecs.\n   * @platform ios\n   */\n  static async getAvailableVideoCodecsAsync(): Promise<VideoCodec[]> {\n    if (!CameraManager.getAvailableVideoCodecsAsync) {\n      throw new UnavailabilityError('Camera', 'getAvailableVideoCodecsAsync');\n    }\n\n    return await CameraManager.getAvailableVideoCodecsAsync();\n  }\n\n  /**\n   * Get picture sizes that are supported by the device.\n   * @return Returns a Promise that resolves to an array of strings representing picture sizes that can be passed to `pictureSize` prop.\n   * The list varies across Android devices but is the same for every iOS.\n   */\n  async getAvailablePictureSizesAsync(): Promise<string[]> {\n    return (await this._cameraRef.current?.getAvailablePictureSizes()) ?? [];\n  }\n\n  /**\n   * Resumes the camera preview.\n   */\n  async resumePreview(): Promise<void> {\n    return this._cameraRef.current?.resumePreview();\n  }\n\n  /**\n   * Pauses the camera preview. It is not recommended to use `takePictureAsync` when preview is paused.\n   */\n  async pausePreview(): Promise<void> {\n    return this._cameraRef.current?.pausePreview();\n  }\n\n  // Values under keys from this object will be transformed to native options\n  static ConversionTables = ConversionTables;\n\n  static defaultProps: CameraProps = {\n    zoom: 0,\n    facing: 'back',\n    enableTorch: false,\n    mode: 'picture',\n    flash: 'off',\n  };\n\n  _cameraHandle?: number | null;\n  _cameraRef = createRef<CameraViewRef>();\n  _lastEvents: { [eventName: string]: string } = {};\n  _lastEventsTimes: { [eventName: string]: Date } = {};\n\n  // @needsAudit\n  /**\n   * Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation\n   * (if `options.skipProcessing` flag is not enabled) and scaled to match the preview.\n   * > **Note**: Make sure to wait for the [`onCameraReady`](#oncameraready) callback before calling this method.\n   * @param options An object in form of `CameraPictureOptions` type.\n   * @return Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on Android,\n   * iOS, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify\n   * the dimensions of the image.\n   *\n   * `base64` is included if the `base64` option was truthy, and is a string containing the JPEG data\n   * of the image in Base64. Prepend it with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source\n   * for an `Image` element for example.\n   *\n   * `exif` is included if the `exif` option was truthy, and is an object containing EXIF\n   * data for the image. The names of its properties are EXIF tags and their values are the values for those tags.\n   *\n   * > On native platforms, the local image URI is temporary. Use [`FileSystem.copyAsync`](filesystem/#filesystemcopyasyncoptions)\n   * > to make a permanent copy of the image.\n   *\n   * **Note** Avoid calling this method while the preview is paused. On iOS, this will take a picture of the last frame that is currently on screen, on Android, this will throw an error.\n   */\n  async takePictureAsync(options?: CameraPictureOptions) {\n    const pictureOptions = ensurePictureOptions(options);\n\n    return this._cameraRef.current?.takePicture(pictureOptions);\n  }\n\n  /**\n   * Presents a modal view controller that uses the [`DataScannerViewController`](https://developer.apple.com/documentation/visionkit/scanning_data_with_the_camera) available on iOS 16+.\n   * @platform ios\n   */\n  static async launchScanner(options?: ScanningOptions): Promise<void> {\n    if (!options) {\n      options = { barcodeTypes: [] };\n    }\n    if (Platform.OS === 'ios' && CameraView.isModernBarcodeScannerAvailable) {\n      await CameraManager.launchScanner(options);\n    }\n  }\n\n  /**\n   * Dismiss the scanner presented by `launchScanner`.\n   * @platform ios\n   */\n  static async dismissScanner(): Promise<void> {\n    if (Platform.OS === 'ios' && CameraView.isModernBarcodeScannerAvailable) {\n      await CameraManager.dismissScanner();\n    }\n  }\n\n  /**\n   * Invokes the `listener` function when a bar code has been successfully scanned. The callback is provided with\n   * an object of the `ScanningResult` shape, where the `type` refers to the bar code type that was scanned and the `data` is the information encoded in the bar code\n   * (in this case of QR codes, this is often a URL). See [`BarcodeType`](#barcodetype) for supported values.\n   * @param listener Invoked with the [ScanningResult](#scanningresult) when a bar code has been successfully scanned.\n   *\n   * @platform ios\n   */\n  static onModernBarcodeScanned(listener: (event: ScanningResult) => void): EventSubscription {\n    return CameraManager.addListener('onModernBarcodeScanned', listener);\n  }\n\n  /**\n   * Starts recording a video that will be saved to cache directory. Videos are rotated to match device's orientation.\n   * Flipping camera during a recording results in stopping it.\n   * @param options A map of `CameraRecordingOptions` type.\n   * @return Returns a Promise that resolves to an object containing video file `uri` property and a `codec` property on iOS.\n   * The Promise is returned if `stopRecording` was invoked, one of `maxDuration` and `maxFileSize` is reached or camera preview is stopped.\n   * @platform android\n   * @platform ios\n   */\n  async recordAsync(options?: CameraRecordingOptions) {\n    const recordingOptions = ensureRecordingOptions(options);\n    return this._cameraRef.current?.record(recordingOptions);\n  }\n\n  /**\n   * Stops recording if any is in progress.\n   */\n  stopRecording() {\n    this._cameraRef.current?.stopRecording();\n  }\n\n  _onCameraReady = () => {\n    if (this.props.onCameraReady) {\n      this.props.onCameraReady();\n    }\n  };\n\n  _onMountError = ({ nativeEvent }: { nativeEvent: { message: string } }) => {\n    if (this.props.onMountError) {\n      this.props.onMountError(nativeEvent);\n    }\n  };\n\n  _onResponsiveOrientationChanged = ({\n    nativeEvent,\n  }: {\n    nativeEvent: { orientation: CameraOrientation };\n  }) => {\n    if (this.props.onResponsiveOrientationChanged) {\n      this.props.onResponsiveOrientationChanged(nativeEvent);\n    }\n  };\n\n  _onObjectDetected =\n    (callback?: Function) =>\n    ({ nativeEvent }: { nativeEvent: any }) => {\n      const { type } = nativeEvent;\n      if (\n        this._lastEvents[type] &&\n        this._lastEventsTimes[type] &&\n        JSON.stringify(nativeEvent) === this._lastEvents[type] &&\n        new Date().getTime() - this._lastEventsTimes[type].getTime() < EventThrottleMs\n      ) {\n        return;\n      }\n\n      if (callback) {\n        callback(nativeEvent);\n        this._lastEventsTimes[type] = new Date();\n        this._lastEvents[type] = JSON.stringify(nativeEvent);\n      }\n    };\n\n  _setReference = (ref: Ref<CameraViewRef>) => {\n    if (ref) {\n      // TODO(Bacon): Unify these - perhaps with hooks?\n      if (Platform.OS === 'web') {\n        this._cameraHandle = ref as any;\n      }\n    }\n  };\n\n  render() {\n    const nativeProps = ensureNativeProps(this.props);\n    const onBarcodeScanned = this.props.onBarcodeScanned\n      ? this._onObjectDetected(this.props.onBarcodeScanned)\n      : undefined;\n\n    return (\n      <ExpoCamera\n        {...nativeProps}\n        ref={this._cameraRef}\n        onCameraReady={this._onCameraReady}\n        onMountError={this._onMountError}\n        onBarcodeScanned={onBarcodeScanned}\n        onPictureSaved={_onPictureSaved}\n        onResponsiveOrientationChanged={this._onResponsiveOrientationChanged}\n      />\n    );\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/ExpoCamera.d.ts b/node_modules/expo-camera/build/ExpoCamera.d.ts
index 83b1cb0..e95bda1 100644
--- a/node_modules/expo-camera/build/ExpoCamera.d.ts
+++ b/node_modules/expo-camera/build/ExpoCamera.d.ts
@@ -1,5 +1,5 @@
-import * as React from 'react';
+import { type ComponentType } from 'react';
 import { CameraNativeProps } from './Camera.types';
-declare const ExpoCamera: React.ComponentType<CameraNativeProps>;
+declare const ExpoCamera: ComponentType<CameraNativeProps>;
 export default ExpoCamera;
 //# sourceMappingURL=ExpoCamera.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/ExpoCamera.d.ts.map b/node_modules/expo-camera/build/ExpoCamera.d.ts.map
index 8ef4490..c062b1c 100644
--- a/node_modules/expo-camera/build/ExpoCamera.d.ts.map
+++ b/node_modules/expo-camera/build/ExpoCamera.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ExpoCamera.d.ts","sourceRoot":"","sources":["../src/ExpoCamera.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAEnD,QAAA,MAAM,UAAU,EAAE,KAAK,CAAC,aAAa,CAAC,iBAAiB,CAA0C,CAAC;AAElG,eAAe,UAAU,CAAC"}
\ No newline at end of file
+{"version":3,"file":"ExpoCamera.d.ts","sourceRoot":"","sources":["../src/ExpoCamera.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,aAAa,EAAE,MAAM,OAAO,CAAC;AAE3C,OAAO,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAEnD,QAAA,MAAM,UAAU,EAAE,aAAa,CAAC,iBAAiB,CAA0C,CAAC;AAE5F,eAAe,UAAU,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/ExpoCamera.js.map b/node_modules/expo-camera/build/ExpoCamera.js.map
index ed8de01..5ec695a 100644
--- a/node_modules/expo-camera/build/ExpoCamera.js.map
+++ b/node_modules/expo-camera/build/ExpoCamera.js.map
@@ -1 +1 @@
-{"version":3,"file":"ExpoCamera.js","sourceRoot":"","sources":["../src/ExpoCamera.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAK7D,MAAM,UAAU,GAA2C,wBAAwB,CAAC,YAAY,CAAC,CAAC;AAElG,eAAe,UAAU,CAAC","sourcesContent":["import { requireNativeViewManager } from 'expo-modules-core';\nimport * as React from 'react';\n\nimport { CameraNativeProps } from './Camera.types';\n\nconst ExpoCamera: React.ComponentType<CameraNativeProps> = requireNativeViewManager('ExpoCamera');\n\nexport default ExpoCamera;\n"]}
\ No newline at end of file
+{"version":3,"file":"ExpoCamera.js","sourceRoot":"","sources":["../src/ExpoCamera.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAK7D,MAAM,UAAU,GAAqC,wBAAwB,CAAC,YAAY,CAAC,CAAC;AAE5F,eAAe,UAAU,CAAC","sourcesContent":["import { requireNativeViewManager } from 'expo-modules-core';\nimport { type ComponentType } from 'react';\n\nimport { CameraNativeProps } from './Camera.types';\n\nconst ExpoCamera: ComponentType<CameraNativeProps> = requireNativeViewManager('ExpoCamera');\n\nexport default ExpoCamera;\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/ExpoCamera.web.d.ts b/node_modules/expo-camera/build/ExpoCamera.web.d.ts
index ac2d84e..0851d91 100644
--- a/node_modules/expo-camera/build/ExpoCamera.web.d.ts
+++ b/node_modules/expo-camera/build/ExpoCamera.web.d.ts
@@ -1,4 +1,4 @@
-import * as React from 'react';
+import { type PropsWithChildren } from 'react';
 import { CameraCapturedPicture, CameraNativeProps, CameraPictureOptions } from './legacy/Camera.types';
 export interface ExponentCameraRef {
     getAvailablePictureSizes: (ratio: string) => Promise<string[]>;
@@ -6,8 +6,6 @@ export interface ExponentCameraRef {
     resumePreview: () => Promise<void>;
     pausePreview: () => Promise<void>;
 }
-declare const ExponentCamera: React.ForwardRefExoticComponent<Pick<CameraNativeProps & {
-    children?: React.ReactNode;
-}, "type" | "flashMode" | "children" | "pointerEvents" | "style" | "zoom" | "pictureSize" | "onCameraReady" | "onMountError" | "poster" | "responsiveOrientationWhenOrientationLocked" | "onResponsiveOrientationChanged" | "onPictureSaved" | "autoFocus" | "whiteBalance" | "onBarCodeScanned" | "onFacesDetected" | "onFaceDetectionError" | "focusDepth" | "barCodeScannerSettings" | "faceDetectorSettings" | "barCodeScannerEnabled" | "faceDetectorEnabled" | "ratio" | "useCamera2Api"> & React.RefAttributes<ExponentCameraRef>>;
+declare const ExponentCamera: import("react").ForwardRefExoticComponent<Omit<PropsWithChildren<CameraNativeProps>, "ref"> & import("react").RefAttributes<ExponentCameraRef>>;
 export default ExponentCamera;
 //# sourceMappingURL=ExpoCamera.web.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/ExpoCamera.web.d.ts.map b/node_modules/expo-camera/build/ExpoCamera.web.d.ts.map
index b979b90..90f4fc6 100644
--- a/node_modules/expo-camera/build/ExpoCamera.web.d.ts.map
+++ b/node_modules/expo-camera/build/ExpoCamera.web.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ExpoCamera.web.d.ts","sourceRoot":"","sources":["../src/ExpoCamera.web.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAK/B,OAAO,EACL,qBAAqB,EACrB,iBAAiB,EACjB,oBAAoB,EAErB,MAAM,uBAAuB,CAAC;AAM/B,MAAM,WAAW,iBAAiB;IAChC,wBAAwB,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/D,WAAW,EAAE,CAAC,OAAO,EAAE,oBAAoB,KAAK,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAC/E,aAAa,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;IACnC,YAAY,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;CACnC;AAED,QAAA,MAAM,cAAc;eAE6C,MAAM,SAAS;ygBA+G/E,CAAC;AAEF,eAAe,cAAc,CAAC"}
\ No newline at end of file
+{"version":3,"file":"ExpoCamera.web.d.ts","sourceRoot":"","sources":["../src/ExpoCamera.web.tsx"],"names":[],"mappings":"AACA,OAAO,EACL,KAAK,iBAAiB,EAOvB,MAAM,OAAO,CAAC;AAKf,OAAO,EACL,qBAAqB,EACrB,iBAAiB,EACjB,oBAAoB,EAErB,MAAM,uBAAuB,CAAC;AAM/B,MAAM,WAAW,iBAAiB;IAChC,wBAAwB,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/D,WAAW,EAAE,CAAC,OAAO,EAAE,oBAAoB,KAAK,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAC/E,aAAa,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;IACnC,YAAY,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;CACnC;AAED,QAAA,MAAM,cAAc,iJA6GnB,CAAC;AAEF,eAAe,cAAc,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/ExpoCamera.web.js b/node_modules/expo-camera/build/ExpoCamera.web.js
index 272e2e7..03fa9a8 100644
--- a/node_modules/expo-camera/build/ExpoCamera.web.js
+++ b/node_modules/expo-camera/build/ExpoCamera.web.js
@@ -1,5 +1,5 @@
 import { CodedError } from 'expo-modules-core';
-import * as React from 'react';
+import { forwardRef, useRef, useMemo, useImperativeHandle, } from 'react';
 import { StyleSheet, View } from 'react-native';
 import createElement from 'react-native-web/dist/exports/createElement';
 import CameraManager from './ExpoCameraManager.web';
@@ -8,8 +8,8 @@ import { capture } from './web/WebCameraUtils';
 import { PictureSizes } from './web/WebConstants';
 import { useWebCameraStream } from './web/useWebCameraStream';
 import { useWebQRScanner } from './web/useWebQRScanner';
-const ExponentCamera = React.forwardRef(({ type, poster, ...props }, ref) => {
-    const video = React.useRef(null);
+const ExponentCamera = forwardRef(({ type, poster, ...props }, ref) => {
+    const video = useRef(null);
     const native = useWebCameraStream(video, type, props, {
         onCameraReady() {
             if (props.onCameraReady) {
@@ -18,8 +18,8 @@ const ExponentCamera = React.forwardRef(({ type, poster, ...props }, ref) => {
         },
         onMountError: props.onMountError,
     });
-    const isQRScannerEnabled = React.useMemo(() => {
-        return !!(props.barCodeScannerSettings?.barCodeTypes?.includes('qr') && !!props.onBarCodeScanned);
+    const isQRScannerEnabled = useMemo(() => {
+        return Boolean(props.barCodeScannerSettings?.barCodeTypes?.includes('qr') && !!props.onBarCodeScanned);
     }, [props.barCodeScannerSettings?.barCodeTypes, props.onBarCodeScanned]);
     useWebQRScanner(video, {
         interval: props.barCodeScannerSettings?.interval,
@@ -30,11 +30,9 @@ const ExponentCamera = React.forwardRef(({ type, poster, ...props }, ref) => {
                 props.onBarCodeScanned(event);
             }
         },
-        // onError: props.onMountError,
     });
-    // const [pause, setPaused]
-    React.useImperativeHandle(ref, () => ({
-        async getAvailablePictureSizes(ratio) {
+    useImperativeHandle(ref, () => ({
+        async getAvailablePictureSizes() {
             return PictureSizes;
         },
         async takePicture(options) {
@@ -72,7 +70,7 @@ const ExponentCamera = React.forwardRef(({ type, poster, ...props }, ref) => {
     // TODO(Bacon): Create a universal prop, on native the microphone is only used when recording videos.
     // Because we don't support recording video in the browser we don't need the user to give microphone permissions.
     const isMuted = true;
-    const style = React.useMemo(() => {
+    const style = useMemo(() => {
         const isFrontFacingCamera = native.type === CameraManager.Type.front;
         return [
             StyleSheet.absoluteFill,
@@ -84,14 +82,12 @@ const ExponentCamera = React.forwardRef(({ type, poster, ...props }, ref) => {
         ];
     }, [native.type]);
     return (<View pointerEvents="box-none" style={[styles.videoWrapper, props.style]}>
-        <Video autoPlay playsInline muted={isMuted} poster={poster} 
-    // webkitPlaysinline
-    pointerEvents={props.pointerEvents} ref={video} style={style}/>
+        <Video autoPlay playsInline muted={isMuted} poster={poster} pointerEvents={props.pointerEvents} ref={video} style={style}/>
         {props.children}
       </View>);
 });
 export default ExponentCamera;
-const Video = React.forwardRef((props, ref) => createElement('video', { ...props, ref }));
+const Video = forwardRef((props, ref) => createElement('video', { ...props, ref }));
 const styles = StyleSheet.create({
     videoWrapper: {
         flex: 1,
diff --git a/node_modules/expo-camera/build/ExpoCamera.web.js.map b/node_modules/expo-camera/build/ExpoCamera.web.js.map
index 52d511f..5c250a3 100644
--- a/node_modules/expo-camera/build/ExpoCamera.web.js.map
+++ b/node_modules/expo-camera/build/ExpoCamera.web.js.map
@@ -1 +1 @@
-{"version":3,"file":"ExpoCamera.web.js","sourceRoot":"","sources":["../src/ExpoCamera.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\nimport createElement from 'react-native-web/dist/exports/createElement';\n\nimport CameraManager from './ExpoCameraManager.web';\nimport {\n  CameraCapturedPicture,\n  CameraNativeProps,\n  CameraPictureOptions,\n  CameraType,\n} from './legacy/Camera.types';\nimport { capture } from './web/WebCameraUtils';\nimport { PictureSizes } from './web/WebConstants';\nimport { useWebCameraStream } from './web/useWebCameraStream';\nimport { useWebQRScanner } from './web/useWebQRScanner';\n\nexport interface ExponentCameraRef {\n  getAvailablePictureSizes: (ratio: string) => Promise<string[]>;\n  takePicture: (options: CameraPictureOptions) => Promise<CameraCapturedPicture>;\n  resumePreview: () => Promise<void>;\n  pausePreview: () => Promise<void>;\n}\n\nconst ExponentCamera = React.forwardRef(\n  (\n    { type, poster, ...props }: CameraNativeProps & { children?: React.ReactNode },\n    ref: React.Ref<ExponentCameraRef>\n  ) => {\n    const video = React.useRef<HTMLVideoElement | null>(null);\n\n    const native = useWebCameraStream(video, type as CameraType, props, {\n      onCameraReady() {\n        if (props.onCameraReady) {\n          props.onCameraReady();\n        }\n      },\n      onMountError: props.onMountError,\n    });\n\n    const isQRScannerEnabled = React.useMemo<boolean>(() => {\n      return !!(\n        props.barCodeScannerSettings?.barCodeTypes?.includes('qr') && !!props.onBarCodeScanned\n      );\n    }, [props.barCodeScannerSettings?.barCodeTypes, props.onBarCodeScanned]);\n\n    useWebQRScanner(video, {\n      interval: props.barCodeScannerSettings?.interval,\n      isEnabled: isQRScannerEnabled,\n      captureOptions: { scale: 1, isImageMirror: native.type === CameraType.front },\n      onScanned(event) {\n        if (props.onBarCodeScanned) {\n          props.onBarCodeScanned(event);\n        }\n      },\n      // onError: props.onMountError,\n    });\n\n    // const [pause, setPaused]\n\n    React.useImperativeHandle(\n      ref,\n      () => ({\n        async getAvailablePictureSizes(ratio: string): Promise<string[]> {\n          return PictureSizes;\n        },\n        async takePicture(options: CameraPictureOptions): Promise<CameraCapturedPicture> {\n          if (!video.current || video.current?.readyState !== video.current?.HAVE_ENOUGH_DATA) {\n            throw new CodedError(\n              'ERR_CAMERA_NOT_READY',\n              'HTMLVideoElement does not have enough camera data to construct an image yet.'\n            );\n          }\n          const settings = native.mediaTrackSettings;\n          if (!settings) {\n            throw new CodedError('ERR_CAMERA_NOT_READY', 'MediaStream is not ready yet.');\n          }\n\n          return capture(video.current, settings, {\n            ...options,\n            // This will always be defined, the option gets added to a queue in the upper-level. We should replace the original so it isn't called twice.\n            onPictureSaved(picture) {\n              if (options.onPictureSaved) {\n                options.onPictureSaved(picture);\n              }\n              if (props.onPictureSaved) {\n                props.onPictureSaved({ nativeEvent: { data: picture, id: -1 } });\n              }\n            },\n          });\n        },\n        async resumePreview(): Promise<void> {\n          if (video.current) {\n            video.current.play();\n          }\n        },\n        async pausePreview(): Promise<void> {\n          if (video.current) {\n            video.current.pause();\n          }\n        },\n      }),\n      [native.mediaTrackSettings, props.onPictureSaved]\n    );\n\n    // TODO(Bacon): Create a universal prop, on native the microphone is only used when recording videos.\n    // Because we don't support recording video in the browser we don't need the user to give microphone permissions.\n    const isMuted = true;\n\n    const style = React.useMemo<StyleProp<ViewStyle>>(() => {\n      const isFrontFacingCamera = native.type === CameraManager.Type.front;\n      return [\n        StyleSheet.absoluteFill,\n        styles.video,\n        {\n          // Flip the camera\n          transform: isFrontFacingCamera ? [{ scaleX: -1 }] : undefined,\n        },\n      ];\n    }, [native.type]);\n\n    return (\n      <View pointerEvents=\"box-none\" style={[styles.videoWrapper, props.style]}>\n        <Video\n          autoPlay\n          playsInline\n          muted={isMuted}\n          poster={poster}\n          // webkitPlaysinline\n          pointerEvents={props.pointerEvents}\n          ref={video}\n          style={style}\n        />\n        {props.children}\n      </View>\n    );\n  }\n);\n\nexport default ExponentCamera;\n\nconst Video = React.forwardRef(\n  (\n    props: React.ComponentProps<typeof View> & {\n      autoPlay?: boolean;\n      playsInline?: boolean;\n      muted?: boolean;\n      poster?: string;\n    },\n    ref: React.Ref<HTMLVideoElement>\n  ) => createElement('video', { ...props, ref })\n);\n\nconst styles = StyleSheet.create({\n  videoWrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n  },\n  video: {\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover',\n  },\n});\n"]}
\ No newline at end of file
+{"version":3,"file":"ExpoCamera.web.js","sourceRoot":"","sources":["../src/ExpoCamera.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport {\n  type PropsWithChildren,\n  forwardRef,\n  useRef,\n  useMemo,\n  useImperativeHandle,\n  type ComponentProps,\n  type Ref,\n} from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\nimport createElement from 'react-native-web/dist/exports/createElement';\n\nimport CameraManager from './ExpoCameraManager.web';\nimport {\n  CameraCapturedPicture,\n  CameraNativeProps,\n  CameraPictureOptions,\n  CameraType,\n} from './legacy/Camera.types';\nimport { capture } from './web/WebCameraUtils';\nimport { PictureSizes } from './web/WebConstants';\nimport { useWebCameraStream } from './web/useWebCameraStream';\nimport { useWebQRScanner } from './web/useWebQRScanner';\n\nexport interface ExponentCameraRef {\n  getAvailablePictureSizes: (ratio: string) => Promise<string[]>;\n  takePicture: (options: CameraPictureOptions) => Promise<CameraCapturedPicture>;\n  resumePreview: () => Promise<void>;\n  pausePreview: () => Promise<void>;\n}\n\nconst ExponentCamera = forwardRef(\n  (\n    { type, poster, ...props }: PropsWithChildren<CameraNativeProps>,\n    ref: Ref<ExponentCameraRef>\n  ) => {\n    const video = useRef<HTMLVideoElement | null>(null);\n\n    const native = useWebCameraStream(video, type as CameraType, props, {\n      onCameraReady() {\n        if (props.onCameraReady) {\n          props.onCameraReady();\n        }\n      },\n      onMountError: props.onMountError,\n    });\n\n    const isQRScannerEnabled = useMemo<boolean>(() => {\n      return Boolean(\n        props.barCodeScannerSettings?.barCodeTypes?.includes('qr') && !!props.onBarCodeScanned\n      );\n    }, [props.barCodeScannerSettings?.barCodeTypes, props.onBarCodeScanned]);\n\n    useWebQRScanner(video, {\n      interval: props.barCodeScannerSettings?.interval,\n      isEnabled: isQRScannerEnabled,\n      captureOptions: { scale: 1, isImageMirror: native.type === CameraType.front },\n      onScanned(event) {\n        if (props.onBarCodeScanned) {\n          props.onBarCodeScanned(event);\n        }\n      },\n    });\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        async getAvailablePictureSizes(): Promise<string[]> {\n          return PictureSizes;\n        },\n        async takePicture(options: CameraPictureOptions): Promise<CameraCapturedPicture> {\n          if (!video.current || video.current?.readyState !== video.current?.HAVE_ENOUGH_DATA) {\n            throw new CodedError(\n              'ERR_CAMERA_NOT_READY',\n              'HTMLVideoElement does not have enough camera data to construct an image yet.'\n            );\n          }\n          const settings = native.mediaTrackSettings;\n          if (!settings) {\n            throw new CodedError('ERR_CAMERA_NOT_READY', 'MediaStream is not ready yet.');\n          }\n\n          return capture(video.current, settings, {\n            ...options,\n            // This will always be defined, the option gets added to a queue in the upper-level. We should replace the original so it isn't called twice.\n            onPictureSaved(picture) {\n              if (options.onPictureSaved) {\n                options.onPictureSaved(picture);\n              }\n              if (props.onPictureSaved) {\n                props.onPictureSaved({ nativeEvent: { data: picture, id: -1 } });\n              }\n            },\n          });\n        },\n        async resumePreview(): Promise<void> {\n          if (video.current) {\n            video.current.play();\n          }\n        },\n        async pausePreview(): Promise<void> {\n          if (video.current) {\n            video.current.pause();\n          }\n        },\n      }),\n      [native.mediaTrackSettings, props.onPictureSaved]\n    );\n\n    // TODO(Bacon): Create a universal prop, on native the microphone is only used when recording videos.\n    // Because we don't support recording video in the browser we don't need the user to give microphone permissions.\n    const isMuted = true;\n\n    const style = useMemo<StyleProp<ViewStyle>>(() => {\n      const isFrontFacingCamera = native.type === CameraManager.Type.front;\n      return [\n        StyleSheet.absoluteFill,\n        styles.video,\n        {\n          // Flip the camera\n          transform: isFrontFacingCamera ? [{ scaleX: -1 }] : undefined,\n        },\n      ];\n    }, [native.type]);\n\n    return (\n      <View pointerEvents=\"box-none\" style={[styles.videoWrapper, props.style]}>\n        <Video\n          autoPlay\n          playsInline\n          muted={isMuted}\n          poster={poster}\n          pointerEvents={props.pointerEvents}\n          ref={video}\n          style={style}\n        />\n        {props.children}\n      </View>\n    );\n  }\n);\n\nexport default ExponentCamera;\n\nconst Video = forwardRef(\n  (\n    props: ComponentProps<typeof View> & {\n      autoPlay?: boolean;\n      playsInline?: boolean;\n      muted?: boolean;\n      poster?: string;\n    },\n    ref: Ref<HTMLVideoElement>\n  ) => createElement('video', { ...props, ref })\n);\n\nconst styles = StyleSheet.create({\n  videoWrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n  },\n  video: {\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover',\n  },\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/index.d.ts b/node_modules/expo-camera/build/index.d.ts
index a68e3aa..4d5b73d 100644
--- a/node_modules/expo-camera/build/index.d.ts
+++ b/node_modules/expo-camera/build/index.d.ts
@@ -1,5 +1,5 @@
+import { PermissionResponse } from 'expo-modules-core';
 import { BarcodeScanningResult, BarcodeType } from './Camera.types';
-import { PermissionResponse } from './legacy/Camera.types';
 export { default as CameraView } from './CameraView';
 /**
  * Checks user's permissions for accessing camera.
diff --git a/node_modules/expo-camera/build/index.d.ts.map b/node_modules/expo-camera/build/index.d.ts.map
index 4d1d326..4bbb419 100644
--- a/node_modules/expo-camera/build/index.d.ts.map
+++ b/node_modules/expo-camera/build/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,qBAAqB,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAEpE,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAE3D,OAAO,EAAE,OAAO,IAAI,UAAU,EAAE,MAAM,cAAc,CAAC;AAGrD;;;GAGG;AACH,iBAAe,yBAAyB,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAEtE;AAGD;;;;GAIG;AACH,iBAAe,6BAA6B,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAE1E;AAGD;;;;;;;;GAQG;AACH,eAAO,MAAM,oBAAoB,wLAG/B,CAAC;AAGH;;;GAGG;AACH,iBAAe,6BAA6B,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAE1E;AAGD;;;;GAIG;AACH,iBAAe,iCAAiC,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAE9E;AAGD;;;;;;;;GAQG;AACH,eAAO,MAAM,wBAAwB,wLAGnC,CAAC;AAEH;;;;;;;;;GASG;AACH,wBAAsB,gBAAgB,CACpC,GAAG,EAAE,MAAM,EACX,YAAY,GAAE,WAAW,EAAW,GACnC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAElC;AAED,cAAc,gBAAgB,CAAC;AAE/B;;GAEG;AACH,eAAO,MAAM,MAAM;;;;;;CAMlB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwB,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AAE7E,OAAO,EAAE,qBAAqB,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAGpE,OAAO,EAAE,OAAO,IAAI,UAAU,EAAE,MAAM,cAAc,CAAC;AAGrD;;;GAGG;AACH,iBAAe,yBAAyB,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAEtE;AAGD;;;;GAIG;AACH,iBAAe,6BAA6B,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAE1E;AAGD;;;;;;;;GAQG;AACH,eAAO,MAAM,oBAAoB,wLAG/B,CAAC;AAGH;;;GAGG;AACH,iBAAe,6BAA6B,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAE1E;AAGD;;;;GAIG;AACH,iBAAe,iCAAiC,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAE9E;AAGD;;;;;;;;GAQG;AACH,eAAO,MAAM,wBAAwB,wLAGnC,CAAC;AAEH;;;;;;;;;GASG;AACH,wBAAsB,gBAAgB,CACpC,GAAG,EAAE,MAAM,EACX,YAAY,GAAE,WAAW,EAAW,GACnC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAElC;AAED,cAAc,gBAAgB,CAAC;AAE/B;;GAEG;AACH,eAAO,MAAM,MAAM;;;;;;CAMlB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/index.js.map b/node_modules/expo-camera/build/index.js.map
index bf47d28..ad8f84e 100644
--- a/node_modules/expo-camera/build/index.js.map
+++ b/node_modules/expo-camera/build/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AAGzD,OAAO,aAAa,MAAM,qBAAqB,CAAC;AAGhD,OAAO,EAAE,OAAO,IAAI,UAAU,EAAE,MAAM,cAAc,CAAC;AAErD,cAAc;AACd;;;GAGG;AACH,KAAK,UAAU,yBAAyB;IACtC,OAAO,aAAa,CAAC,yBAAyB,EAAE,CAAC;AACnD,CAAC;AAED,cAAc;AACd;;;;GAIG;AACH,KAAK,UAAU,6BAA6B;IAC1C,OAAO,aAAa,CAAC,6BAA6B,EAAE,CAAC;AACvD,CAAC;AAED,cAAc;AACd;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,oBAAoB,CAAC;IACvD,SAAS,EAAE,yBAAyB;IACpC,aAAa,EAAE,6BAA6B;CAC7C,CAAC,CAAC;AAEH,cAAc;AACd;;;GAGG;AACH,KAAK,UAAU,6BAA6B;IAC1C,OAAO,aAAa,CAAC,6BAA6B,EAAE,CAAC;AACvD,CAAC;AAED,cAAc;AACd;;;;GAIG;AACH,KAAK,UAAU,iCAAiC;IAC9C,OAAO,aAAa,CAAC,iCAAiC,EAAE,CAAC;AAC3D,CAAC;AAED,cAAc;AACd;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,oBAAoB,CAAC;IAC3D,SAAS,EAAE,6BAA6B;IACxC,aAAa,EAAE,iCAAiC;CACjD,CAAC,CAAC;AAEH;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,GAAW,EACX,eAA8B,CAAC,IAAI,CAAC;IAEpC,OAAO,aAAa,CAAC,gBAAgB,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;AAC3D,CAAC;AAED,cAAc,gBAAgB,CAAC;AAE/B;;GAEG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB,yBAAyB;IACzB,6BAA6B;IAC7B,6BAA6B;IAC7B,iCAAiC;IACjC,gBAAgB;CACjB,CAAC","sourcesContent":["import { createPermissionHook } from 'expo-modules-core';\n\nimport { BarcodeScanningResult, BarcodeType } from './Camera.types';\nimport CameraManager from './ExpoCameraManager';\nimport { PermissionResponse } from './legacy/Camera.types';\n\nexport { default as CameraView } from './CameraView';\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera.\n * On iOS this will require apps to specify an `NSCameraUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing microphone.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing the microphone.\n * On iOS this will require apps to specify an `NSMicrophoneUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the microphone.\n * This uses both `requestMicrophonePermissionsAsync` and `getMicrophonePermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Camera.useMicrophonePermissions();\n * ```\n */\nexport const useMicrophonePermissions = createPermissionHook({\n  getMethod: getMicrophonePermissionsAsync,\n  requestMethod: requestMicrophonePermissionsAsync,\n});\n\n/**\n * Scan bar codes from the image at the given URL.\n * @param url URL to get the image from.\n * @param barcodeTypes An array of bar code types. Defaults to all supported bar code types on\n * the platform.\n * > __Note:__ Only QR codes are supported on iOS.\n * On android, the barcode should take up the majority of the image for best results.\n * @return A possibly empty array of objects of the `BarcodeScanningResult` shape, where the type\n * refers to the barcode type that was scanned and the data is the information encoded in the barcode.\n */\nexport async function scanFromURLAsync(\n  url: string,\n  barcodeTypes: BarcodeType[] = ['qr']\n): Promise<BarcodeScanningResult[]> {\n  return CameraManager.scanFromURLAsync(url, barcodeTypes);\n}\n\nexport * from './Camera.types';\n\n/**\n * @hidden\n */\nexport const Camera = {\n  getCameraPermissionsAsync,\n  requestCameraPermissionsAsync,\n  getMicrophonePermissionsAsync,\n  requestMicrophonePermissionsAsync,\n  scanFromURLAsync,\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAsB,MAAM,mBAAmB,CAAC;AAG7E,OAAO,aAAa,MAAM,qBAAqB,CAAC;AAEhD,OAAO,EAAE,OAAO,IAAI,UAAU,EAAE,MAAM,cAAc,CAAC;AAErD,cAAc;AACd;;;GAGG;AACH,KAAK,UAAU,yBAAyB;IACtC,OAAO,aAAa,CAAC,yBAAyB,EAAE,CAAC;AACnD,CAAC;AAED,cAAc;AACd;;;;GAIG;AACH,KAAK,UAAU,6BAA6B;IAC1C,OAAO,aAAa,CAAC,6BAA6B,EAAE,CAAC;AACvD,CAAC;AAED,cAAc;AACd;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,oBAAoB,CAAC;IACvD,SAAS,EAAE,yBAAyB;IACpC,aAAa,EAAE,6BAA6B;CAC7C,CAAC,CAAC;AAEH,cAAc;AACd;;;GAGG;AACH,KAAK,UAAU,6BAA6B;IAC1C,OAAO,aAAa,CAAC,6BAA6B,EAAE,CAAC;AACvD,CAAC;AAED,cAAc;AACd;;;;GAIG;AACH,KAAK,UAAU,iCAAiC;IAC9C,OAAO,aAAa,CAAC,iCAAiC,EAAE,CAAC;AAC3D,CAAC;AAED,cAAc;AACd;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,oBAAoB,CAAC;IAC3D,SAAS,EAAE,6BAA6B;IACxC,aAAa,EAAE,iCAAiC;CACjD,CAAC,CAAC;AAEH;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,GAAW,EACX,eAA8B,CAAC,IAAI,CAAC;IAEpC,OAAO,aAAa,CAAC,gBAAgB,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;AAC3D,CAAC;AAED,cAAc,gBAAgB,CAAC;AAE/B;;GAEG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB,yBAAyB;IACzB,6BAA6B;IAC7B,6BAA6B;IAC7B,iCAAiC;IACjC,gBAAgB;CACjB,CAAC","sourcesContent":["import { createPermissionHook, PermissionResponse } from 'expo-modules-core';\n\nimport { BarcodeScanningResult, BarcodeType } from './Camera.types';\nimport CameraManager from './ExpoCameraManager';\n\nexport { default as CameraView } from './CameraView';\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera.\n * On iOS this will require apps to specify an `NSCameraUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing microphone.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing the microphone.\n * On iOS this will require apps to specify an `NSMicrophoneUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the microphone.\n * This uses both `requestMicrophonePermissionsAsync` and `getMicrophonePermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Camera.useMicrophonePermissions();\n * ```\n */\nexport const useMicrophonePermissions = createPermissionHook({\n  getMethod: getMicrophonePermissionsAsync,\n  requestMethod: requestMicrophonePermissionsAsync,\n});\n\n/**\n * Scan bar codes from the image at the given URL.\n * @param url URL to get the image from.\n * @param barcodeTypes An array of bar code types. Defaults to all supported bar code types on\n * the platform.\n * > __Note:__ Only QR codes are supported on iOS.\n * On android, the barcode should take up the majority of the image for best results.\n * @return A possibly empty array of objects of the `BarcodeScanningResult` shape, where the type\n * refers to the barcode type that was scanned and the data is the information encoded in the barcode.\n */\nexport async function scanFromURLAsync(\n  url: string,\n  barcodeTypes: BarcodeType[] = ['qr']\n): Promise<BarcodeScanningResult[]> {\n  return CameraManager.scanFromURLAsync(url, barcodeTypes);\n}\n\nexport * from './Camera.types';\n\n/**\n * @hidden\n */\nexport const Camera = {\n  getCameraPermissionsAsync,\n  requestCameraPermissionsAsync,\n  getMicrophonePermissionsAsync,\n  requestMicrophonePermissionsAsync,\n  scanFromURLAsync,\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/legacy/Camera.d.ts b/node_modules/expo-camera/build/legacy/Camera.d.ts
index c093525..7e038a5 100644
--- a/node_modules/expo-camera/build/legacy/Camera.d.ts
+++ b/node_modules/expo-camera/build/legacy/Camera.d.ts
@@ -158,7 +158,7 @@ export default class Camera extends React.Component<CameraProps> {
         nativeEvent: any;
     }) => void;
     _setReference: (ref?: React.Component) => void;
-    render(): JSX.Element;
+    render(): React.JSX.Element;
 }
 export declare const Constants: ConstantsType, getPermissionsAsync: typeof Camera.getPermissionsAsync, requestPermissionsAsync: typeof Camera.requestPermissionsAsync, getCameraPermissionsAsync: typeof Camera.getCameraPermissionsAsync, requestCameraPermissionsAsync: typeof Camera.requestCameraPermissionsAsync, getMicrophonePermissionsAsync: typeof Camera.getMicrophonePermissionsAsync, requestMicrophonePermissionsAsync: typeof Camera.requestMicrophonePermissionsAsync;
 //# sourceMappingURL=Camera.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/legacy/ExpoCamera.web.d.ts b/node_modules/expo-camera/build/legacy/ExpoCamera.web.d.ts
index 5d2e8e8..ada9ed4 100644
--- a/node_modules/expo-camera/build/legacy/ExpoCamera.web.d.ts
+++ b/node_modules/expo-camera/build/legacy/ExpoCamera.web.d.ts
@@ -6,8 +6,8 @@ export interface ExponentCameraRef {
     resumePreview: () => Promise<void>;
     pausePreview: () => Promise<void>;
 }
-declare const ExponentCamera: React.ForwardRefExoticComponent<Pick<CameraNativeProps & {
+declare const ExponentCamera: React.ForwardRefExoticComponent<Omit<CameraNativeProps & {
     children?: React.ReactNode;
-}, "type" | "flashMode" | "children" | "pointerEvents" | "style" | "zoom" | "pictureSize" | "onCameraReady" | "onMountError" | "poster" | "responsiveOrientationWhenOrientationLocked" | "onResponsiveOrientationChanged" | "onPictureSaved" | "autoFocus" | "whiteBalance" | "onBarCodeScanned" | "onFacesDetected" | "onFaceDetectionError" | "focusDepth" | "barCodeScannerSettings" | "faceDetectorSettings" | "barCodeScannerEnabled" | "faceDetectorEnabled" | "ratio" | "useCamera2Api"> & React.RefAttributes<ExponentCameraRef>>;
+}, "ref"> & React.RefAttributes<ExponentCameraRef>>;
 export default ExponentCamera;
 //# sourceMappingURL=ExpoCamera.web.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-camera/build/legacy/ExpoCamera.web.d.ts.map b/node_modules/expo-camera/build/legacy/ExpoCamera.web.d.ts.map
index 8dd9314..7bf3455 100644
--- a/node_modules/expo-camera/build/legacy/ExpoCamera.web.d.ts.map
+++ b/node_modules/expo-camera/build/legacy/ExpoCamera.web.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ExpoCamera.web.d.ts","sourceRoot":"","sources":["../../src/legacy/ExpoCamera.web.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAI/B,OAAO,EACL,qBAAqB,EACrB,iBAAiB,EACjB,oBAAoB,EAErB,MAAM,gBAAgB,CAAC;AAOxB,MAAM,WAAW,iBAAiB;IAChC,wBAAwB,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/D,WAAW,EAAE,CAAC,OAAO,EAAE,oBAAoB,KAAK,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAC/E,aAAa,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;IACnC,YAAY,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;CACnC;AAED,QAAA,MAAM,cAAc;eAE0D,MAAM,SAAS;ygBA+G5F,CAAC;AAEF,eAAe,cAAc,CAAC"}
\ No newline at end of file
+{"version":3,"file":"ExpoCamera.web.d.ts","sourceRoot":"","sources":["../../src/legacy/ExpoCamera.web.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAI/B,OAAO,EACL,qBAAqB,EACrB,iBAAiB,EACjB,oBAAoB,EAErB,MAAM,gBAAgB,CAAC;AAOxB,MAAM,WAAW,iBAAiB;IAChC,wBAAwB,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/D,WAAW,EAAE,CAAC,OAAO,EAAE,oBAAoB,KAAK,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAC/E,aAAa,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;IACnC,YAAY,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;CACnC;AAED,QAAA,MAAM,cAAc;eAE0D,MAAM,SAAS;mDA+G5F,CAAC;AAEF,eAAe,cAAc,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-camera/expo-module.config.json b/node_modules/expo-camera/expo-module.config.json
index bc2a75c..3a796dc 100644
--- a/node_modules/expo-camera/expo-module.config.json
+++ b/node_modules/expo-camera/expo-module.config.json
@@ -8,6 +8,12 @@
     "modules": [
       "expo.modules.camera.CameraViewModule",
       "expo.modules.camera.legacy.CameraViewLegacyModule"
+    ],
+    "gradleAarProjects": [
+      {
+        "name": "cameraview-aar",
+        "aarFilePath": "android/libs/cameraview-1.0.0.aar"
+      }
     ]
   }
 }
diff --git a/node_modules/expo-camera/ios/CameraViewModule.swift b/node_modules/expo-camera/ios/CameraViewModule.swift
index d1d4b04..11433ad 100644
--- a/node_modules/expo-camera/ios/CameraViewModule.swift
+++ b/node_modules/expo-camera/ios/CameraViewModule.swift
@@ -142,10 +142,34 @@ public final class CameraViewModule: Module, ScannerResultHandler {
         }
       }
 
+      Prop("mirror") { (view, mirror: Bool?) in
+        if let mirror {
+          view.mirror = mirror
+          return
+        }
+        view.mirror = false
+      }
+
+      Prop("active") { (view, active: Bool?) in
+        if let active {
+          view.active = active
+          return
+        }
+        view.active = true
+      }
+
       OnViewDidUpdateProps { view in
         view.initCamera()
       }
 
+      AsyncFunction("resumePreview") { view in
+        view.resumePreview()
+      }
+
+      AsyncFunction("pausePreview") { view in
+        view.pausePreview()
+      }
+
       AsyncFunction("getAvailablePictureSizes") { (_: String?) in
         return PictureSize.allCases.map {
           $0.rawValue
diff --git a/node_modules/expo-camera/ios/Common/CameraExceptions.swift b/node_modules/expo-camera/ios/Common/CameraExceptions.swift
index 73b39a2..9e11aa0 100644
--- a/node_modules/expo-camera/ios/Common/CameraExceptions.swift
+++ b/node_modules/expo-camera/ios/Common/CameraExceptions.swift
@@ -32,7 +32,7 @@ internal class CameraSavingImageException: Exception {
 
 internal class CameraRecordingException: GenericException<String?> {
   override var reason: String {
-    "Video Codec '\(param)' is not supported on this device"
+    "Video Codec '\(String(describing: param))' is not supported on this device"
   }
 }
 
diff --git a/node_modules/expo-camera/ios/Common/CameraPermissionsRequester.swift b/node_modules/expo-camera/ios/Common/CameraPermissionsRequester.swift
index a093f38..794289f 100644
--- a/node_modules/expo-camera/ios/Common/CameraPermissionsRequester.swift
+++ b/node_modules/expo-camera/ios/Common/CameraPermissionsRequester.swift
@@ -16,7 +16,7 @@ extension BaseCameraRequester {
     var systemStatus: AVAuthorizationStatus
     let description = Bundle.main.infoDictionary?[key] as? String
 
-    if let description {
+    if description != nil {
       systemStatus = AVCaptureDevice.authorizationStatus(for: mediaType)
     } else {
       EXFatal(EXErrorWithMessage("""
@@ -80,7 +80,6 @@ class CameraPermissionRequester: NSObject, EXPermissionsRequester, BaseCameraReq
 
   func getPermissions() -> [AnyHashable: Any] {
     var systemStatus: AVAuthorizationStatus
-    var status: EXPermissionStatus
 
     let cameraUsuageDescription = Bundle.main.infoDictionary?[cameraKey] as? String
     let microphoneUsuageDescription = Bundle.main.infoDictionary?[microphoneKey] as? String
diff --git a/node_modules/expo-camera/ios/Common/TakePictureOptions.swift b/node_modules/expo-camera/ios/Common/TakePictureOptions.swift
index 5847dc8..75526e7 100644
--- a/node_modules/expo-camera/ios/Common/TakePictureOptions.swift
+++ b/node_modules/expo-camera/ios/Common/TakePictureOptions.swift
@@ -13,6 +13,9 @@ struct TakePictureOptions: Record {
   @Field
   var exif: Bool = false
 
+  @Field
+  var mirror: Bool = false
+
   @Field
   var fastMode: Bool = false
 
diff --git a/node_modules/expo-camera/ios/Current/CameraEnums.swift b/node_modules/expo-camera/ios/Current/CameraEnums.swift
index 238df25..7677618 100644
--- a/node_modules/expo-camera/ios/Current/CameraEnums.swift
+++ b/node_modules/expo-camera/ios/Current/CameraEnums.swift
@@ -47,8 +47,6 @@ enum FocusMode: String, Enumerable {
       return .autoFocus
     case .off:
       return .continuousAutoFocus
-    default:
-      return .continuousAutoFocus
     }
   }
 }
diff --git a/node_modules/expo-camera/ios/Current/CameraView.swift b/node_modules/expo-camera/ios/Current/CameraView.swift
index 09276c5..6228f00 100644
--- a/node_modules/expo-camera/ios/Current/CameraView.swift
+++ b/node_modules/expo-camera/ios/Current/CameraView.swift
@@ -19,7 +19,6 @@ public class CameraView: ExpoView, EXCameraInterface, EXAppLifecycleListener,
   private var isValidVideoOptions = true
   private var videoCodecType: AVVideoCodecType?
   private var photoCaptureOptions: TakePictureOptions?
-  private var videoStabilizationMode: AVCaptureVideoStabilizationMode?
   private var errorNotification: NSObjectProtocol?
   private var physicalOrientation: UIDeviceOrientation = .unknown
   private var motionManager: CMMotionManager = {
@@ -93,7 +92,14 @@ public class CameraView: ExpoView, EXCameraInterface, EXAppLifecycleListener,
     }
   }
 
+  var active = true {
+    didSet {
+      updateCameraIsActive()
+    }
+  }
+
   var animateShutter = true
+  var mirror = false
 
   var zoom: CGFloat = 0 {
     didSet {
@@ -358,13 +364,16 @@ public class CameraView: ExpoView, EXCameraInterface, EXAppLifecycleListener,
       let connection = photoOutput.connection(with: .video)
       let orientation = self.responsiveWhenOrientationLocked ? self.physicalOrientation : UIDevice.current.orientation
       connection?.videoOrientation = ExpoCameraUtils.videoOrientation(for: orientation)
+
+      // options.mirror is deprecated but should continue to work until removed
+      connection?.isVideoMirrored = self.presetCamera == .front && (self.mirror || options.mirror)
       var photoSettings = AVCapturePhotoSettings()
 
       if photoOutput.availablePhotoCodecTypes.contains(AVVideoCodecType.hevc) {
         photoSettings = AVCapturePhotoSettings(format: [AVVideoCodecKey: AVVideoCodecType.jpeg])
       }
 
-      var requestedFlashMode = self.flashMode.toDeviceFlashMode()
+      let requestedFlashMode = self.flashMode.toDeviceFlashMode()
       if photoOutput.supportedFlashModes.contains(requestedFlashMode) {
         photoSettings.flashMode = requestedFlashMode
       }
@@ -551,20 +560,18 @@ public class CameraView: ExpoView, EXCameraInterface, EXAppLifecycleListener,
     sessionQueue.async {
       if let videoFileOutput = self.videoFileOutput, !videoFileOutput.isRecording && self.videoRecordedPromise == nil {
         if let connection = videoFileOutput.connection(with: .video) {
-          if !connection.isVideoStabilizationSupported {
-            log.warn("\(#function): Video Stabilization is not supported on this device.")
+          if connection.isVideoStabilizationSupported {
+            connection.preferredVideoStabilizationMode = .auto
           } else {
-            if let videoStabilizationMode = self.videoStabilizationMode {
-              connection.preferredVideoStabilizationMode = videoStabilizationMode
-            }
+            log.warn("\(#function): Video Stabilization is not supported on this device.")
           }
 
           let orientation = self.responsiveWhenOrientationLocked ? self.physicalOrientation : UIDevice.current.orientation
           connection.videoOrientation = ExpoCameraUtils.videoOrientation(for: orientation)
           self.setVideoOptions(options: options, for: connection, promise: promise)
 
-          if connection.isVideoOrientationSupported && options.mirror {
-            connection.isVideoMirrored = options.mirror
+          if connection.isVideoOrientationSupported && self.mirror {
+            connection.isVideoMirrored = self.mirror
           }
         }
 
@@ -674,11 +681,25 @@ public class CameraView: ExpoView, EXCameraInterface, EXAppLifecycleListener,
 
   public override func removeFromSuperview() {
     lifecycleManager?.unregisterAppLifecycleListener(self)
+    self.stopSession()
     UIDevice.current.endGeneratingDeviceOrientationNotifications()
     NotificationCenter.default.removeObserver(self, name: UIDevice.orientationDidChangeNotification, object: nil)
     super.removeFromSuperview()
   }
 
+  func updateCameraIsActive() {
+    if self.session.isRunning == active {
+      return
+    }
+    sessionQueue.async {
+      if self.active {
+        self.session.startRunning()
+      } else {
+        self.session.stopRunning()
+      }
+    }
+  }
+
   public func fileOutput(
     _ output: AVCaptureFileOutput,
     didFinishRecordingTo outputFileURL: URL,
@@ -776,10 +797,20 @@ public class CameraView: ExpoView, EXCameraInterface, EXAppLifecycleListener,
       self.session.commitConfiguration()
 
       self.motionManager.stopAccelerometerUpdates()
-      self.session.stopRunning()
+      if self.session.isRunning {
+        self.session.stopRunning()
+      }
     }
   }
 
+  func resumePreview() {
+    previewLayer.videoPreviewLayer.connection?.isEnabled = true
+  }
+
+  func pausePreview() {
+    previewLayer.videoPreviewLayer.connection?.isEnabled = false
+  }
+
   @objc func orientationChanged(notification: Notification) {
     changePreviewOrientation()
   }
diff --git a/node_modules/expo-camera/ios/Legacy/CameraEnumsLegacy.swift b/node_modules/expo-camera/ios/Legacy/CameraEnumsLegacy.swift
index cf03d39..36fca46 100644
--- a/node_modules/expo-camera/ios/Legacy/CameraEnumsLegacy.swift
+++ b/node_modules/expo-camera/ios/Legacy/CameraEnumsLegacy.swift
@@ -38,8 +38,6 @@ enum CameraTypeLegacy: Int, Enumerable {
       return .front
     case .back:
       return .back
-    default:
-      return .back
     }
   }
 }
@@ -54,8 +52,6 @@ enum AutoFocus: Int, Enumerable {
       return .autoFocus
     case .off:
       return .continuousAutoFocus
-    default:
-      return .autoFocus
     }
   }
 }
diff --git a/node_modules/expo-camera/ios/Legacy/CameraViewLegacy.swift b/node_modules/expo-camera/ios/Legacy/CameraViewLegacy.swift
index 986f94d..b705b6b 100644
--- a/node_modules/expo-camera/ios/Legacy/CameraViewLegacy.swift
+++ b/node_modules/expo-camera/ios/Legacy/CameraViewLegacy.swift
@@ -335,7 +335,7 @@ public class CameraViewLegacy: ExpoView, EXCameraInterface, EXAppLifecycleListen
 
   private func addErrorNotification() {
     if self.errorNotification != nil {
-      NotificationCenter.default.removeObserver(self.errorNotification)
+      NotificationCenter.default.removeObserver(self.errorNotification as Any)
     }
 
     self.errorNotification = NotificationCenter.default.addObserver(
@@ -544,7 +544,7 @@ public class CameraViewLegacy: ExpoView, EXCameraInterface, EXAppLifecycleListen
       guard let exifDict = metadata[kCGImagePropertyExifDictionary as String] as? NSDictionary else {
         return
       }
-      var updatedExif = ExpoCameraUtils.updateExif(
+      let updatedExif = ExpoCameraUtils.updateExif(
         metadata: exifDict,
         with: ["Orientation": ExpoCameraUtils.toExifOrientation(orientation: takenImage.imageOrientation)]
       )
@@ -581,7 +581,7 @@ public class CameraViewLegacy: ExpoView, EXCameraInterface, EXAppLifecycleListen
         if updatedMetadata[kCGImagePropertyGPSDictionary as String] == nil {
           updatedMetadata[kCGImagePropertyGPSDictionary as String] = gpsDict
         } else {
-          if var metadataGpsDict = updatedMetadata[kCGImagePropertyGPSDictionary as String] as? NSMutableDictionary {
+          if let metadataGpsDict = updatedMetadata[kCGImagePropertyGPSDictionary as String] as? NSMutableDictionary {
             metadataGpsDict.addEntries(from: gpsDict)
           }
         }
diff --git a/node_modules/expo-camera/plugin/build/withCamera.d.ts b/node_modules/expo-camera/plugin/build/withCamera.d.ts
index d7a3229..14a4790 100644
--- a/node_modules/expo-camera/plugin/build/withCamera.d.ts
+++ b/node_modules/expo-camera/plugin/build/withCamera.d.ts
@@ -1,6 +1,4 @@
-import { ConfigPlugin } from '@expo/config-plugins';
-import { MergeResults } from '@expo/config-plugins/build/utils/generateCode';
-export declare function addCameraImport(src: string): MergeResults;
+import { type ConfigPlugin } from 'expo/config-plugins';
 declare const _default: ConfigPlugin<void | {
     cameraPermission?: string | false | undefined;
     microphonePermission?: string | false | undefined;
diff --git a/node_modules/expo-camera/plugin/build/withCamera.js b/node_modules/expo-camera/plugin/build/withCamera.js
index aa4ead9..c0da0b1 100644
--- a/node_modules/expo-camera/plugin/build/withCamera.js
+++ b/node_modules/expo-camera/plugin/build/withCamera.js
@@ -1,60 +1,9 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.addCameraImport = void 0;
-const config_plugins_1 = require("@expo/config-plugins");
-const generateCode_1 = require("@expo/config-plugins/build/utils/generateCode");
+const config_plugins_1 = require("expo/config-plugins");
 const pkg = require('expo-camera/package.json');
 const CAMERA_USAGE = 'Allow $(PRODUCT_NAME) to access your camera';
 const MICROPHONE_USAGE = 'Allow $(PRODUCT_NAME) to access your microphone';
-// Because we need the package to be added AFTER the React and Google maven packages, we create a new allprojects.
-// It's ok to have multiple allprojects.repositories, so we create a new one since it's cheaper than tokenizing
-// the existing block to find the correct place to insert our camera maven.
-const gradleMaven = [
-    `def expoCameraMavenPath = new File(["node", "--print", "require.resolve('expo-camera/package.json')"].execute(null, rootDir).text.trim(), "../android/maven")`,
-    `allprojects { repositories { maven { url(expoCameraMavenPath) } } }`,
-].join('\n');
-const withAndroidCameraGradle = (config) => {
-    return (0, config_plugins_1.withProjectBuildGradle)(config, (config) => {
-        if (config.modResults.language === 'groovy') {
-            config.modResults.contents = addCameraImport(config.modResults.contents).contents;
-        }
-        else {
-            throw new Error('Cannot add camera maven gradle because the build.gradle is not groovy');
-        }
-        return config;
-    });
-};
-function addCameraImport(src) {
-    return appendContents({
-        tag: 'expo-camera-import',
-        src,
-        newSrc: gradleMaven,
-        comment: '//',
-    });
-}
-exports.addCameraImport = addCameraImport;
-// Fork of config-plugins mergeContents, but appends the contents to the end of the file.
-function appendContents({ src, newSrc, tag, comment, }) {
-    const header = (0, generateCode_1.createGeneratedHeaderComment)(newSrc, tag, comment);
-    if (!src.includes(header)) {
-        // Ensure the old generated contents are removed.
-        const sanitizedTarget = (0, generateCode_1.removeGeneratedContents)(src, tag);
-        const contentsToAdd = [
-            // @something
-            header,
-            // contents
-            newSrc,
-            // @end
-            `${comment} @generated end ${tag}`,
-        ].join('\n');
-        return {
-            contents: sanitizedTarget ?? src + contentsToAdd,
-            didMerge: true,
-            didClear: !!sanitizedTarget,
-        };
-    }
-    return { contents: src, didClear: false, didMerge: false };
-}
 const withCamera = (config, { cameraPermission, microphonePermission, recordAudioAndroid = true } = {}) => {
     config_plugins_1.IOSConfig.Permissions.createPermissionsPlugin({
         NSCameraUsageDescription: CAMERA_USAGE,
@@ -68,6 +17,6 @@ const withCamera = (config, { cameraPermission, microphonePermission, recordAudi
         // Optional
         recordAudioAndroid && 'android.permission.RECORD_AUDIO',
     ].filter(Boolean));
-    return withAndroidCameraGradle(config);
+    return config;
 };
 exports.default = (0, config_plugins_1.createRunOncePlugin)(withCamera, pkg.name, pkg.version);
diff --git a/node_modules/expo-camera/plugin/src/withCamera.ts b/node_modules/expo-camera/plugin/src/withCamera.ts
index d2d50f4..2462f76 100644
--- a/node_modules/expo-camera/plugin/src/withCamera.ts
+++ b/node_modules/expo-camera/plugin/src/withCamera.ts
@@ -1,83 +1,15 @@
 import {
   AndroidConfig,
-  withProjectBuildGradle,
-  ConfigPlugin,
+  type ConfigPlugin,
   createRunOncePlugin,
   IOSConfig,
-} from '@expo/config-plugins';
-import {
-  createGeneratedHeaderComment,
-  MergeResults,
-  removeGeneratedContents,
-} from '@expo/config-plugins/build/utils/generateCode';
+} from 'expo/config-plugins';
 
 const pkg = require('expo-camera/package.json');
 
 const CAMERA_USAGE = 'Allow $(PRODUCT_NAME) to access your camera';
 const MICROPHONE_USAGE = 'Allow $(PRODUCT_NAME) to access your microphone';
 
-// Because we need the package to be added AFTER the React and Google maven packages, we create a new allprojects.
-// It's ok to have multiple allprojects.repositories, so we create a new one since it's cheaper than tokenizing
-// the existing block to find the correct place to insert our camera maven.
-const gradleMaven = [
-  `def expoCameraMavenPath = new File(["node", "--print", "require.resolve('expo-camera/package.json')"].execute(null, rootDir).text.trim(), "../android/maven")`,
-  `allprojects { repositories { maven { url(expoCameraMavenPath) } } }`,
-].join('\n');
-
-const withAndroidCameraGradle: ConfigPlugin = (config) => {
-  return withProjectBuildGradle(config, (config) => {
-    if (config.modResults.language === 'groovy') {
-      config.modResults.contents = addCameraImport(config.modResults.contents).contents;
-    } else {
-      throw new Error('Cannot add camera maven gradle because the build.gradle is not groovy');
-    }
-    return config;
-  });
-};
-
-export function addCameraImport(src: string): MergeResults {
-  return appendContents({
-    tag: 'expo-camera-import',
-    src,
-    newSrc: gradleMaven,
-    comment: '//',
-  });
-}
-
-// Fork of config-plugins mergeContents, but appends the contents to the end of the file.
-function appendContents({
-  src,
-  newSrc,
-  tag,
-  comment,
-}: {
-  src: string;
-  newSrc: string;
-  tag: string;
-  comment: string;
-}): MergeResults {
-  const header = createGeneratedHeaderComment(newSrc, tag, comment);
-  if (!src.includes(header)) {
-    // Ensure the old generated contents are removed.
-    const sanitizedTarget = removeGeneratedContents(src, tag);
-    const contentsToAdd = [
-      // @something
-      header,
-      // contents
-      newSrc,
-      // @end
-      `${comment} @generated end ${tag}`,
-    ].join('\n');
-
-    return {
-      contents: sanitizedTarget ?? src + contentsToAdd,
-      didMerge: true,
-      didClear: !!sanitizedTarget,
-    };
-  }
-  return { contents: src, didClear: false, didMerge: false };
-}
-
 const withCamera: ConfigPlugin<
   {
     cameraPermission?: string | false;
@@ -102,7 +34,7 @@ const withCamera: ConfigPlugin<
     ].filter(Boolean) as string[]
   );
 
-  return withAndroidCameraGradle(config);
+  return config;
 };
 
 export default createRunOncePlugin(withCamera, pkg.name, pkg.version);
diff --git a/node_modules/expo-camera/src/Camera.types.ts b/node_modules/expo-camera/src/Camera.types.ts
index 0846db5..e15593c 100644
--- a/node_modules/expo-camera/src/Camera.types.ts
+++ b/node_modules/expo-camera/src/Camera.types.ts
@@ -3,8 +3,9 @@ import {
   PermissionStatus,
   PermissionExpiration,
   PermissionHookOptions,
+  EventSubscription,
 } from 'expo-modules-core';
-import { Ref } from 'react';
+import type { Ref } from 'react';
 import type { ViewProps } from 'react-native';
 
 export type CameraType = 'front' | 'back';
@@ -15,6 +16,8 @@ export type ImageType = 'png' | 'jpg';
 
 export type CameraMode = 'picture' | 'video';
 
+export type CameraRatio = '4:3' | '16:9' | '1:1';
+
 /**
  * This option specifies the mode of focus on the device.
  * - `on` - Indicates that the device should autofocus once and then lock the focus.
@@ -150,6 +153,14 @@ export type CameraPictureOptions = {
    * @platform web
    */
   isImageMirror?: boolean;
+  /**
+   * When set to `true`, the output image will be flipped along the vertical axis when using the front camera.
+   * @default false
+   * @platform ios
+   * @platform android
+   * @deprecated Use `mirror` prop on `CameraView` instead.
+   */
+  mirror?: boolean;
   /**
    * @hidden
    */
@@ -177,7 +188,7 @@ export type CameraRecordingOptions = {
   /**
    * If `true`, the recorded video will be flipped along the vertical axis. iOS flips videos recorded with the front camera by default,
    * but you can reverse that back by setting this to `true`. On Android, this is handled in the user's device settings.
-   * @platform ios
+   * @deprecated Use `mirror` prop on `CameraView` instead.
    */
   mirror?: boolean;
   /**
@@ -313,12 +324,24 @@ export type CameraProps = ViewProps & {
    * @default false
    */
   mute?: boolean;
+  /**
+   * A boolean that determines whether the camera should mirror the image when using the front camera.
+   * @default false
+   */
+  mirror?: boolean;
   /**
    * Indicates the focus mode to use.
    * @default off
    * @platform ios
    */
   autofocus?: FocusMode;
+  /**
+   * A boolean that determines whether the camera should be active.
+   * Useful in situations where the camera may not have unmounted but you still want to stop the camera session.
+   * @default true
+   * @platform ios
+   */
+  active?: boolean;
   /**
    * Specify the quality of the recorded video. Use one of `VideoQuality` possible values:
    * for 16:9 resolution `2160p`, `1080p`, `720p`, `480p` : `Android only` and for 4:3 `4:3` (the size is 640x480).
@@ -331,8 +354,9 @@ export type CameraProps = ViewProps & {
    */
   animateShutter?: boolean;
   /**
-   * A string representing the size of pictures [`takePictureAsync`](#takepictureasync) will take.
-   * Available sizes can be fetched with [`getAvailablePictureSizes`](#getavailablepicturesizes).
+   * A string representing the size of pictures [`takePictureAsync`](#takepictureasyncoptions) will take.
+   * Available sizes can be fetched with [`getAvailablePictureSizesAsync`](#getavailablepicturesizesasync).
+   * Setting this prop will cause the `ratio` prop to be ignored as the aspect ratio is determined by the selected size.
    */
   pictureSize?: string;
   /**
@@ -340,21 +364,12 @@ export type CameraProps = ViewProps & {
    * @default false
    */
   enableTorch?: boolean;
-  /**
-   * Callback invoked when camera preview has been set.
-   */
-  onCameraReady?: () => void;
   /**
    * The video stabilization mode used for a video recording. Use one of [`VideoStabilization.<value>`](#videostabilization).
    * You can read more about each stabilization type in [Apple Documentation](https://developer.apple.com/documentation/avfoundation/avcapturevideostabilizationmode).
    * @platform ios
    */
   videoStabilizationMode?: VideoStabilization;
-  /**
-   * Callback invoked when camera preview could not been started.
-   * @param event Error object that contains a `message`.
-   */
-  onMountError?: (event: CameraMountError) => void;
   /**
    * @example
    * ```tsx
@@ -366,15 +381,6 @@ export type CameraProps = ViewProps & {
    * ```
    */
   barcodeScannerSettings?: BarcodeSettings;
-  /**
-   * Callback that is invoked when a barcode has been successfully scanned. The callback is provided with
-   * an object of the [`BarcodeScanningResult`](#barcodescanningresult) shape, where the `type`
-   * refers to the barcode type that was scanned and the `data` is the information encoded in the barcode
-   * (in this case of QR codes, this is often a URL). See [`BarcodeType`](#barcodetype) for supported values.
-   * for supported values.
-   * @param scanningResult
-   */
-  onBarcodeScanned?: (scanningResult: BarcodeScanningResult) => void;
   /**
    * A URL for an image to be shown while the camera is loading.
    * @platform web
@@ -386,6 +392,31 @@ export type CameraProps = ViewProps & {
    * @platform ios
    */
   responsiveOrientationWhenOrientationLocked?: boolean;
+  /**
+   * A string representing the aspect ratio of the preview. For example, `4:3` and `16:9`.
+   * Note: Setting the aspect ratio here will change the scaleType of the camera preview from `FILL` to `FIT`.
+   * @default 1:1
+   * @platform android
+   */
+  ratio?: CameraRatio;
+  /**
+   * Callback invoked when camera preview has been set.
+   */
+  onCameraReady?: () => void;
+  /**
+   * Callback invoked when camera preview could not start.
+   * @param event Error object that contains a `message`.
+   */
+  onMountError?: (event: CameraMountError) => void;
+  /**
+   * Callback that is invoked when a barcode has been successfully scanned. The callback is provided with
+   * an object of the [`BarcodeScanningResult`](#barcodescanningresult) shape, where the `type`
+   * refers to the barcode type that was scanned, and the `data` is the information encoded in the barcode
+   * (in this case of QR codes, this is often a URL). See [`BarcodeType`](#barcodetype) for supported values.
+   * for supported values.
+   * @param scanningResult
+   */
+  onBarcodeScanned?: (scanningResult: BarcodeScanningResult) => void;
   /**
    * Callback invoked when responsive orientation changes. Only applicable if `responsiveOrientationWhenOrientationLocked` is `true`
    * @param event result object that contains updated orientation of camera
@@ -403,6 +434,8 @@ export interface CameraViewRef {
   readonly record: (options?: CameraRecordingOptions) => Promise<{ uri: string }>;
   readonly stopRecording: () => Promise<void>;
   readonly launchModernScanner: () => Promise<void>;
+  readonly resumePreview: () => Promise<void>;
+  readonly pausePreview: () => Promise<void>;
 }
 
 /**
@@ -424,6 +457,7 @@ export type CameraNativeProps = {
   autoFocus?: FocusMode;
   mute?: boolean;
   zoom?: number;
+  ratio?: CameraRatio;
   barcodeScannerSettings?: BarcodeSettings;
   barcodeScannerEnabled?: boolean;
   poster?: string;
@@ -478,4 +512,10 @@ export type BarcodeType =
   | 'code128'
   | 'upc_a';
 
-export { PermissionResponse, PermissionStatus, PermissionExpiration, PermissionHookOptions };
+export {
+  PermissionResponse,
+  PermissionStatus,
+  PermissionExpiration,
+  PermissionHookOptions,
+  EventSubscription as Subscription,
+};
diff --git a/node_modules/expo-camera/src/CameraView.tsx b/node_modules/expo-camera/src/CameraView.tsx
index fb6fe1c..5c1e7d4 100644
--- a/node_modules/expo-camera/src/CameraView.tsx
+++ b/node_modules/expo-camera/src/CameraView.tsx
@@ -1,6 +1,5 @@
-import { Platform, UnavailabilityError, EventEmitter, Subscription } from 'expo-modules-core';
-import * as React from 'react';
-import { Ref } from 'react';
+import { Platform, UnavailabilityError, type EventSubscription } from 'expo-modules-core';
+import { type Ref, Component, createRef } from 'react';
 
 import {
   CameraCapturedPicture,
@@ -17,8 +16,6 @@ import ExpoCamera from './ExpoCamera';
 import CameraManager from './ExpoCameraManager';
 import { ConversionTables, ensureNativeProps } from './utils/props';
 
-const emitter = new EventEmitter(CameraManager);
-
 const EventThrottleMs = 500;
 
 const _PICTURE_SAVED_CALLBACKS = {};
@@ -26,29 +23,42 @@ const _PICTURE_SAVED_CALLBACKS = {};
 let _GLOBAL_PICTURE_ID = 1;
 
 function ensurePictureOptions(options?: CameraPictureOptions): CameraPictureOptions {
-  const pictureOptions: CameraPictureOptions =
-    !options || typeof options !== 'object' ? {} : options;
+  if (!options || typeof options !== 'object') {
+    return {};
+  }
 
-  if (!pictureOptions.quality) {
-    pictureOptions.quality = 1;
+  if (!options.quality) {
+    options.quality = 1;
+  }
+
+  if (options.mirror) {
+    console.warn(
+      'The `mirror` option is deprecated. Please use the `mirror` prop on the `CameraView` instead.'
+    );
   }
-  if (pictureOptions.onPictureSaved) {
+
+  if (options.onPictureSaved) {
     const id = _GLOBAL_PICTURE_ID++;
-    _PICTURE_SAVED_CALLBACKS[id] = pictureOptions.onPictureSaved;
-    pictureOptions.id = id;
-    pictureOptions.fastMode = true;
+    _PICTURE_SAVED_CALLBACKS[id] = options.onPictureSaved;
+    options.id = id;
+    options.fastMode = true;
   }
-  return pictureOptions;
+
+  return options;
 }
 
-function ensureRecordingOptions(options?: CameraRecordingOptions): CameraRecordingOptions {
-  let recordingOptions = options || {};
+function ensureRecordingOptions(options: CameraRecordingOptions = {}): CameraRecordingOptions {
+  if (!options || typeof options !== 'object') {
+    return {};
+  }
 
-  if (!recordingOptions || typeof recordingOptions !== 'object') {
-    recordingOptions = {};
+  if (options.mirror) {
+    console.warn(
+      'The `mirror` option is deprecated. Please use the `mirror` prop on the `CameraView` instead.'
+    );
   }
 
-  return recordingOptions;
+  return options;
 }
 
 function _onPictureSaved({
@@ -64,7 +74,7 @@ function _onPictureSaved({
   }
 }
 
-export default class CameraView extends React.Component<CameraProps> {
+export default class CameraView extends Component<CameraProps> {
   /**
    * Property that determines if the current device has the ability to use `DataScannerViewController` (iOS 16+).
    */
@@ -106,6 +116,20 @@ export default class CameraView extends React.Component<CameraProps> {
     return (await this._cameraRef.current?.getAvailablePictureSizes()) ?? [];
   }
 
+  /**
+   * Resumes the camera preview.
+   */
+  async resumePreview(): Promise<void> {
+    return this._cameraRef.current?.resumePreview();
+  }
+
+  /**
+   * Pauses the camera preview. It is not recommended to use `takePictureAsync` when preview is paused.
+   */
+  async pausePreview(): Promise<void> {
+    return this._cameraRef.current?.pausePreview();
+  }
+
   // Values under keys from this object will be transformed to native options
   static ConversionTables = ConversionTables;
 
@@ -118,33 +142,36 @@ export default class CameraView extends React.Component<CameraProps> {
   };
 
   _cameraHandle?: number | null;
-  _cameraRef = React.createRef<CameraViewRef>();
+  _cameraRef = createRef<CameraViewRef>();
   _lastEvents: { [eventName: string]: string } = {};
   _lastEventsTimes: { [eventName: string]: Date } = {};
 
   // @needsAudit
   /**
    * Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation
-   * (if `options.skipProcessing` flag is not enabled) and scaled to match the preview. Anyway on Android it is essential
-   * to set ratio prop to get a picture with correct dimensions.
+   * (if `options.skipProcessing` flag is not enabled) and scaled to match the preview.
    * > **Note**: Make sure to wait for the [`onCameraReady`](#oncameraready) callback before calling this method.
    * @param options An object in form of `CameraPictureOptions` type.
-   * @return Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on iOS,
-   * Android, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify
-   * the dimensions of the image. `base64` is included if the `base64` option was truthy, and is a string containing the JPEG data
-   * of the image in Base64--prepend that with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source
-   * for an `Image` element for example. `exif` is included if the `exif` option was truthy, and is an object containing EXIF
-   * data for the image--the names of its properties are EXIF tags and their values are the values for those tags.
+   * @return Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on Android,
+   * iOS, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify
+   * the dimensions of the image.
+   *
+   * `base64` is included if the `base64` option was truthy, and is a string containing the JPEG data
+   * of the image in Base64. Prepend it with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source
+   * for an `Image` element for example.
+   *
+   * `exif` is included if the `exif` option was truthy, and is an object containing EXIF
+   * data for the image. The names of its properties are EXIF tags and their values are the values for those tags.
    *
    * > On native platforms, the local image URI is temporary. Use [`FileSystem.copyAsync`](filesystem/#filesystemcopyasyncoptions)
    * > to make a permanent copy of the image.
+   *
+   * **Note** Avoid calling this method while the preview is paused. On iOS, this will take a picture of the last frame that is currently on screen, on Android, this will throw an error.
    */
-  async takePictureAsync(
-    options?: CameraPictureOptions
-  ): Promise<CameraCapturedPicture | undefined> {
+  async takePictureAsync(options?: CameraPictureOptions) {
     const pictureOptions = ensurePictureOptions(options);
 
-    return await this._cameraRef.current?.takePicture(pictureOptions);
+    return this._cameraRef.current?.takePicture(pictureOptions);
   }
 
   /**
@@ -161,7 +188,7 @@ export default class CameraView extends React.Component<CameraProps> {
   }
 
   /**
-   * Dimiss the scanner presented by `launchScanner`.
+   * Dismiss the scanner presented by `launchScanner`.
    * @platform ios
    */
   static async dismissScanner(): Promise<void> {
@@ -178,8 +205,8 @@ export default class CameraView extends React.Component<CameraProps> {
    *
    * @platform ios
    */
-  static onModernBarcodeScanned(listener: (event: ScanningResult) => void): Subscription {
-    return emitter.addListener<ScanningResult>('onModernBarcodeScanned', listener);
+  static onModernBarcodeScanned(listener: (event: ScanningResult) => void): EventSubscription {
+    return CameraManager.addListener('onModernBarcodeScanned', listener);
   }
 
   /**
@@ -191,9 +218,9 @@ export default class CameraView extends React.Component<CameraProps> {
    * @platform android
    * @platform ios
    */
-  async recordAsync(options?: CameraRecordingOptions): Promise<{ uri: string } | undefined> {
+  async recordAsync(options?: CameraRecordingOptions) {
     const recordingOptions = ensureRecordingOptions(options);
-    return await this._cameraRef.current?.record(recordingOptions);
+    return this._cameraRef.current?.record(recordingOptions);
   }
 
   /**
diff --git a/node_modules/expo-camera/src/ExpoCamera.ts b/node_modules/expo-camera/src/ExpoCamera.ts
index 001a827..45232a2 100644
--- a/node_modules/expo-camera/src/ExpoCamera.ts
+++ b/node_modules/expo-camera/src/ExpoCamera.ts
@@ -1,8 +1,8 @@
 import { requireNativeViewManager } from 'expo-modules-core';
-import * as React from 'react';
+import { type ComponentType } from 'react';
 
 import { CameraNativeProps } from './Camera.types';
 
-const ExpoCamera: React.ComponentType<CameraNativeProps> = requireNativeViewManager('ExpoCamera');
+const ExpoCamera: ComponentType<CameraNativeProps> = requireNativeViewManager('ExpoCamera');
 
 export default ExpoCamera;
diff --git a/node_modules/expo-camera/src/ExpoCamera.web.tsx b/node_modules/expo-camera/src/ExpoCamera.web.tsx
index 1951c03..fd1a202 100644
--- a/node_modules/expo-camera/src/ExpoCamera.web.tsx
+++ b/node_modules/expo-camera/src/ExpoCamera.web.tsx
@@ -1,5 +1,13 @@
 import { CodedError } from 'expo-modules-core';
-import * as React from 'react';
+import {
+  type PropsWithChildren,
+  forwardRef,
+  useRef,
+  useMemo,
+  useImperativeHandle,
+  type ComponentProps,
+  type Ref,
+} from 'react';
 import { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';
 import createElement from 'react-native-web/dist/exports/createElement';
 
@@ -22,12 +30,12 @@ export interface ExponentCameraRef {
   pausePreview: () => Promise<void>;
 }
 
-const ExponentCamera = React.forwardRef(
+const ExponentCamera = forwardRef(
   (
-    { type, poster, ...props }: CameraNativeProps & { children?: React.ReactNode },
-    ref: React.Ref<ExponentCameraRef>
+    { type, poster, ...props }: PropsWithChildren<CameraNativeProps>,
+    ref: Ref<ExponentCameraRef>
   ) => {
-    const video = React.useRef<HTMLVideoElement | null>(null);
+    const video = useRef<HTMLVideoElement | null>(null);
 
     const native = useWebCameraStream(video, type as CameraType, props, {
       onCameraReady() {
@@ -38,8 +46,8 @@ const ExponentCamera = React.forwardRef(
       onMountError: props.onMountError,
     });
 
-    const isQRScannerEnabled = React.useMemo<boolean>(() => {
-      return !!(
+    const isQRScannerEnabled = useMemo<boolean>(() => {
+      return Boolean(
         props.barCodeScannerSettings?.barCodeTypes?.includes('qr') && !!props.onBarCodeScanned
       );
     }, [props.barCodeScannerSettings?.barCodeTypes, props.onBarCodeScanned]);
@@ -53,15 +61,12 @@ const ExponentCamera = React.forwardRef(
           props.onBarCodeScanned(event);
         }
       },
-      // onError: props.onMountError,
     });
 
-    // const [pause, setPaused]
-
-    React.useImperativeHandle(
+    useImperativeHandle(
       ref,
       () => ({
-        async getAvailablePictureSizes(ratio: string): Promise<string[]> {
+        async getAvailablePictureSizes(): Promise<string[]> {
           return PictureSizes;
         },
         async takePicture(options: CameraPictureOptions): Promise<CameraCapturedPicture> {
@@ -107,7 +112,7 @@ const ExponentCamera = React.forwardRef(
     // Because we don't support recording video in the browser we don't need the user to give microphone permissions.
     const isMuted = true;
 
-    const style = React.useMemo<StyleProp<ViewStyle>>(() => {
+    const style = useMemo<StyleProp<ViewStyle>>(() => {
       const isFrontFacingCamera = native.type === CameraManager.Type.front;
       return [
         StyleSheet.absoluteFill,
@@ -126,7 +131,6 @@ const ExponentCamera = React.forwardRef(
           playsInline
           muted={isMuted}
           poster={poster}
-          // webkitPlaysinline
           pointerEvents={props.pointerEvents}
           ref={video}
           style={style}
@@ -139,15 +143,15 @@ const ExponentCamera = React.forwardRef(
 
 export default ExponentCamera;
 
-const Video = React.forwardRef(
+const Video = forwardRef(
   (
-    props: React.ComponentProps<typeof View> & {
+    props: ComponentProps<typeof View> & {
       autoPlay?: boolean;
       playsInline?: boolean;
       muted?: boolean;
       poster?: string;
     },
-    ref: React.Ref<HTMLVideoElement>
+    ref: Ref<HTMLVideoElement>
   ) => createElement('video', { ...props, ref })
 );
 
diff --git a/node_modules/expo-camera/src/__tests__/ExponentCameraManager-test.web.ts b/node_modules/expo-camera/src/__tests__/ExponentCameraManager-test.web.ts
new file mode 100644
index 0000000..1d61506
--- /dev/null
+++ b/node_modules/expo-camera/src/__tests__/ExponentCameraManager-test.web.ts
@@ -0,0 +1,29 @@
+/**
+ * @jest-environment jsdom
+ */
+
+import { PermissionStatus } from '../Camera.types';
+import ExponentCameraManager from '../ExpoCameraManager';
+
+describe(ExponentCameraManager.getCameraPermissionsAsync, () => {
+  it('handles a TypeError from Firefox', async () => {
+    const typeError = new TypeError(
+      "'camera' (value of 'name' member of PermissionDescriptor) is not a valid value for enumeration PermissionName."
+    );
+
+    Object.assign(window.navigator, {
+      permissions: {
+        query: jest.fn().mockRejectedValue(typeError),
+      },
+    });
+
+    const result = await ExponentCameraManager.getCameraPermissionsAsync();
+
+    expect(result).toMatchObject({
+      status: PermissionStatus.UNDETERMINED,
+      expires: 'never',
+      canAskAgain: true,
+      granted: false,
+    });
+  });
+});
diff --git a/node_modules/expo-camera/src/index.ts b/node_modules/expo-camera/src/index.ts
index 7758442..a509559 100644
--- a/node_modules/expo-camera/src/index.ts
+++ b/node_modules/expo-camera/src/index.ts
@@ -1,8 +1,7 @@
-import { createPermissionHook } from 'expo-modules-core';
+import { createPermissionHook, PermissionResponse } from 'expo-modules-core';
 
 import { BarcodeScanningResult, BarcodeType } from './Camera.types';
 import CameraManager from './ExpoCameraManager';
-import { PermissionResponse } from './legacy/Camera.types';
 
 export { default as CameraView } from './CameraView';
 
diff --git a/node_modules/expo-camera/src/legacy/utils/__tests__/props-test.node.ts b/node_modules/expo-camera/src/legacy/utils/__tests__/props-test.node.ts
new file mode 100644
index 0000000..0a91746
--- /dev/null
+++ b/node_modules/expo-camera/src/legacy/utils/__tests__/props-test.node.ts
@@ -0,0 +1,34 @@
+import { AutoFocus, CameraType, FlashMode, WhiteBalance } from '../../Camera.types';
+import { convertNativeProps } from '../props';
+
+describe(convertNativeProps, () => {
+  it(`allows nullish`, () => {
+    expect(convertNativeProps()).toStrictEqual({});
+  });
+  it(`converts known properties to native props`, () => {
+    expect(
+      convertNativeProps({
+        type: CameraType.front,
+        flashMode: FlashMode.torch,
+        autoFocus: AutoFocus.auto,
+        whiteBalance: WhiteBalance.continuous,
+      })
+    ).toStrictEqual({
+      autoFocus: 'auto',
+      flashMode: 'torch',
+      type: 'front',
+      whiteBalance: 'continuous',
+    });
+  });
+  it(`converts unknown properties to undefined values`, () => {
+    expect(
+      convertNativeProps({
+        type: 'invalid',
+        foo: 'bar',
+      } as any)
+    ).toStrictEqual({
+      type: undefined,
+      foo: 'bar',
+    });
+  });
+});
diff --git a/node_modules/expo-camera/src/legacy/utils/__tests__/props-test.ts b/node_modules/expo-camera/src/legacy/utils/__tests__/props-test.ts
new file mode 100644
index 0000000..5c30424
--- /dev/null
+++ b/node_modules/expo-camera/src/legacy/utils/__tests__/props-test.ts
@@ -0,0 +1,79 @@
+import { BarCodeScanner } from 'expo-barcode-scanner';
+import { Platform } from 'react-native';
+
+import { AutoFocus, CameraType, FlashMode, WhiteBalance } from '../../Camera.types';
+import { ensureNativeProps } from '../props';
+
+describe(ensureNativeProps, () => {
+  it(`processes platform props`, () => {
+    const onBarCodeScanned = () => {};
+    const onFacesDetected = () => {};
+
+    expect(
+      ensureNativeProps({
+        type: CameraType.front,
+        flashMode: FlashMode.torch,
+        autoFocus: AutoFocus.auto,
+        whiteBalance: WhiteBalance.continuous,
+        poster: './image.png',
+        ratio: '1080p',
+        useCamera2Api: true,
+        barCodeScannerSettings: {
+          barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],
+        },
+        onBarCodeScanned,
+        onFacesDetected,
+      })
+    ).toStrictEqual(
+      Platform.select({
+        ios: {
+          // Native module not defined
+          autoFocus: undefined,
+          type: undefined,
+          whiteBalance: undefined,
+          flashMode: undefined,
+          barCodeScannerSettings: {
+            barCodeTypes: [undefined],
+          },
+          onBarCodeScanned,
+          onFacesDetected,
+          barCodeScannerEnabled: true,
+          faceDetectorEnabled: true,
+        },
+        android: {
+          // Native module not defined
+          autoFocus: undefined,
+          type: undefined,
+          whiteBalance: undefined,
+          flashMode: undefined,
+          barCodeScannerSettings: {
+            barCodeTypes: [undefined],
+          },
+          onBarCodeScanned,
+          onFacesDetected,
+          barCodeScannerEnabled: true,
+          faceDetectorEnabled: true,
+          // Android only
+          ratio: '1080p',
+          useCamera2Api: true,
+        },
+        // Web and node
+        default: {
+          autoFocus: 'auto',
+          flashMode: 'torch',
+          type: 'front',
+          whiteBalance: 'continuous',
+          barCodeScannerSettings: {
+            barCodeTypes: ['qr'],
+          },
+          onBarCodeScanned,
+          onFacesDetected,
+          barCodeScannerEnabled: true,
+          faceDetectorEnabled: true,
+          // Web only
+          poster: './image.png',
+        },
+      })
+    );
+  });
+});
diff --git a/node_modules/expo-camera/tsconfig.json b/node_modules/expo-camera/tsconfig.json
index a24ec0f..cbe9e19 100644
--- a/node_modules/expo-camera/tsconfig.json
+++ b/node_modules/expo-camera/tsconfig.json
@@ -5,5 +5,5 @@
     "outDir": "./build"
   },
   "include": ["./src"],
-  "exclude": ["**/__mocks__/*", "**/__tests__/*"]
+  "exclude": ["**/__mocks__/*", "**/__tests__/*", "**/__rsc_tests__/*"]
 }
